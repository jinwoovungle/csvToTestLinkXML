<?xml version="1.0" encoding="UTF-8"?>
<testsuite id="" name="test_suite_name" >
<node_order><![CDATA[]]></node_order>
<details><![CDATA[]]></details>
<testsuite id="" name="Ad Initialization" >
	<node_order><![CDATA[1]]></node_order>
	<details><![CDATA[]]></details>
<testcase internalid="" name="fresh initialization after app installation">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify fresh initialization after app installation</p>]]></summary>
	<preconditions><![CDATA[<p>fresh installation</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. install the test app<br>2. type in the vaild App ID and HostAPI<br>3. initialize the app<br>4. try to load multiple non-autocacheable ads</p>]]></actions>
	<expectedresults><![CDATA[<p>/new API is called successfully<br>/config API is called successfully<br>all active placements are listed in test app<br>auto-cacheable placements complete in auto-caching<br>ad loads work successfully</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="the successful initialization with the valid app ID and valid hostAPI">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify the successful initialization with the valid app ID and valid hostAPI</p>]]></summary>
	<preconditions><![CDATA[<p></p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. close the test app<br>2. type in the vaild App ID and HostAPI<br>3. initialize the app<br>4. try to load multiple non-autocacheable ads</p>]]></actions>
	<expectedresults><![CDATA[<p>/config API is called successfully<br>all active placements are listed in test app<br>auto-cacheable placements complete in auto-caching<br>cached placements are playable<br>ad loads work successfully</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="/config API request payload">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify /config API request payload</p>]]></summary>
	<preconditions><![CDATA[<p></p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. observe /config request API payload</p>]]></actions>
	<expectedresults><![CDATA[<p>all information exists in /config request API payload</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="the cached ad after re-initialization">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify the cached ad after re-initialization</p>]]></summary>
	<preconditions><![CDATA[<p></p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. load multiple non-autocacheable placements and auto-cacheable placements<br>3. close the test app<br>4. type in the vaild App ID and HostAPI<br>5. initialize the app<br>6. observe the cached placements are playable</p>]]></actions>
	<expectedresults><![CDATA[<p>the cached placements should be playable without reloading the ad.<br>the cached auto-cacheable placements should not be auto-cached.</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="re-initialization after refresh timeout">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify re-initialization after refresh timeout</p>]]></summary>
	<preconditions><![CDATA[<p>short refresh_time</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. wait for &quot;refresh_time&quot;<br>3. observe /config API is called</p>]]></actions>
	<expectedresults><![CDATA[<p>/config API is called successfully after refresh_time times out<br>all active placements are listed in test app</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="the failure of initialization with invalid HostAPI">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify the failure of initialization with invalid HostAPI</p>]]></summary>
	<preconditions><![CDATA[<p>invalid HostAPI<br>inactive HostAPI</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the test app with the invalid HostAPI<br>2. repeat with inactive HostAPI</p>]]></actions>
	<expectedresults><![CDATA[<p>Initialization fails and SDK should display error message</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="the failure of initialization with invalid AppID">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify the failure of initialization with invalid AppID</p>]]></summary>
	<preconditions><![CDATA[<p>invalid AppID<br>inactive AppID</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the test app with the invalid HostAPI<br>2. repeat with inactive HostAPI</p>]]></actions>
	<expectedresults><![CDATA[<p>Initialization fails and SDK should display error message</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="the initialization of zero placement app">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify the initialization of zero placement app</p>]]></summary>
	<preconditions><![CDATA[<p>zero placement App</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app</p>]]></actions>
	<expectedresults><![CDATA[<p>No placement lists in /config response API payload<br>no placement lists in test app</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="the initialization of inactive placement">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify the initialization of inactive placement</p>]]></summary>
	<preconditions><![CDATA[<p>multiple inactive placements</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app</p>]]></actions>
	<expectedresults><![CDATA[<p>inactive placement are not listed in /config response API payload nor available in test app</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="the initilization in background">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify the initilization in background</p>]]></summary>
	<preconditions><![CDATA[<p></p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. put the app in background</p>]]></actions>
	<expectedresults><![CDATA[<p>initialization works successfully in background</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="the updated placement list">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify the updated placement list</p>]]></summary>
	<preconditions><![CDATA[<p></p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. update the status of placements in Dashboard (active <-> inactive, auto-cacheable <-> non auto-cacheable)<br>3. wait for 10 mins to apply the update in Dashboard<br>4. close and reinitialize the app</p>]]></actions>
	<expectedresults><![CDATA[<p>placements status in /config response API payload is updated<br>auto-cacheable ad is auto-cached<br>inactive placements are not listed<br>cached ads are still playable</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
</testsuite>
<testsuite id="" name="Load Ad" >
	<node_order><![CDATA[1]]></node_order>
	<details><![CDATA[]]></details>
<testcase internalid="" name="all types of ad loading">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify all types of ad loading</p>]]></summary>
	<preconditions><![CDATA[<p>auto-cacheable all ad types<br>non auto-cacheable all ad types</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. load ad and auto-cache<br>3. observe /ads API call and asset downloading</p>]]></actions>
	<expectedresults><![CDATA[<p>all types of ads load successful by manual and auto-cache<br>/ads API is called<br>placement ID should be matched<br>all listed assets must be stored</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="the URLs of TPATs">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify the URLs of TPATs</p>]]></summary>
	<preconditions><![CDATA[<p>the multiple URLs in a TPAT</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. load ad and auto-cache<br>3. observe /ads response API payload</p>]]></actions>
	<expectedresults><![CDATA[<p>TPAT Urls are available in /ads response payload<br>- percentage TPATs<br>- mute/unmute TPATs<br>- video_close TPAT<br>- postroll_click TPAT<br>- postroll_view TPAT</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="asset list">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify asset list</p>]]></summary>
	<preconditions><![CDATA[<p></p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. load ad and auto-cache<br>3. observe /ads response API payload - assets</p>]]></actions>
	<expectedresults><![CDATA[<p>the correct URLs of all listed assets are called and the assets are loaded successfully<br>- post_bundle<br>- video url<br>- dynamic template contents</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="cta_overlay (legacy only)">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify cta_overlay (legacy only)</p>]]></summary>
	<preconditions><![CDATA[<p></p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. load ad and auto-cache<br>3. observe /ads response API payload - cta_overlay</p>]]></actions>
	<expectedresults><![CDATA[<p>&quot;enabled&quot;, and &quot;click_area&quot; exist in &quot;cta_overlay&quot;</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="&quot;delay&quot;">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify &quot;delay&quot;</p>]]></summary>
	<preconditions><![CDATA[<p>set &quot;delay&quot; to 10/20 seconds in /ads response payload</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p></p>]]></actions>
	<expectedresults><![CDATA[<p>the next ad loads with delay</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="reload the ad after sleep timeout">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify reload the ad after sleep timeout</p>]]></summary>
	<preconditions><![CDATA[<p>sleep response</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p></p>]]></actions>
	<expectedresults><![CDATA[<p>- ad asset download in sleep<br>- no callback for ad load<br>- download after sleep timeout</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
</testsuite>
<testsuite id="" name="Play Ad" >
	<node_order><![CDATA[1]]></node_order>
	<details><![CDATA[]]></details>
<testcase internalid="" name="/will_play_ad API call">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify /will_play_ad API call</p>]]></summary>
	<preconditions><![CDATA[<p></p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the ad<br>2. load each ad type<br>3. play each ad type</p>]]></actions>
	<expectedresults><![CDATA[<p>SDK calls /will_play_ad as soon as the ad starts to play.<br>exceptions by ad type and OS platform:<br>iOS : MREC, FF, FV: no /will_play_ad API call is fired<br>Android: FF, MREC : no /will_play_ad API call is fired</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="load ad and play ad at the same time">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify load ad and play ad at the same time</p>]]></summary>
	<preconditions><![CDATA[<p></p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the ad<br>2. load multiple ads<br>3. while the ads are loading, play an ad<br>4. close the ad<br>5. play the loaded ads</p>]]></actions>
	<expectedresults><![CDATA[<p>ad loading continues while the ad plays<br>the loaded ads are playable</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="/report_ad after video is closed">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify /report_ad after video is closed</p>]]></summary>
	<preconditions><![CDATA[<p></p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the ad<br>2. load each ad types<br>3. play each ad type<br>4. close the ad</p>]]></actions>
	<expectedresults><![CDATA[<p>/report_ad is called when the ad is closed</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="the playback in airplane mode">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify the playback in airplane mode</p>]]></summary>
	<preconditions><![CDATA[<p></p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the ad<br>2. load each ad types<br>3. put the device in airplain mode<br>3. play each ad type</p>]]></actions>
	<expectedresults><![CDATA[<p>ad playback must be done</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
</testsuite>
<testsuite id="" name="Play ad - TPAT" >
	<node_order><![CDATA[1]]></node_order>
	<details><![CDATA[]]></details>
<testcase internalid="" name="play_percentage TPATs">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify play_percentage TPATs</p>]]></summary>
	<preconditions><![CDATA[<p>single or an array of URLs in play_percentage TPAT</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the ad<br>2. load each ad types<br>3. play each ad type<br>4. Observe play_percentage TPATs are called</p>]]></actions>
	<expectedresults><![CDATA[<p>all TPATs in the array of each play_percentage must be fired<br>The play percentage of TPAT call matches to video play progress</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="POSTROLL_VIEW">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify POSTROLL_VIEW</p>]]></summary>
	<preconditions><![CDATA[<p>single or an array of URLs in postroll.view TPAT</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the ad<br>2. load each ad types<br>3. play each ad type<br>4. move to postroll view page (ex> endcard)</p>]]></actions>
	<expectedresults><![CDATA[<p>Single page ad: POSTROLL_VIEW is fired when the ad is played<br>Multi Page Ad: POSTROLL_VIEW is fired when the ad moves to Endcard</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="VIDEO_MUTE/VIDEO_UNMUTE">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify VIDEO_MUTE/VIDEO_UNMUTE</p>]]></summary>
	<preconditions><![CDATA[<p>single or an array of URLs in video.mute TPAT<br>single or an array of URLs in video.unmute TPAT</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the ad<br>2. load each ad types<br>3. play each ad type<br>4. turn on / off the mute on video multiple times</p>]]></actions>
	<expectedresults><![CDATA[<p>video.mute TPAT must be fired when the mute is set ON<br>video.unmute TPAT must be fired when the mute is set OFF</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="VIDEO_CLOSE">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify VIDEO_CLOSE</p>]]></summary>
	<preconditions><![CDATA[<p>single or an array of URLs in video.close</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the ad<br>2. load each ad types<br>3. play each ad type<br>4. close the video while it plays</p>]]></actions>
	<expectedresults><![CDATA[<p>video.close TPAT must be fired</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="POSTROLL_CLICK on POSTROLL_VIEW">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify POSTROLL_CLICK on POSTROLL_VIEW</p>]]></summary>
	<preconditions><![CDATA[<p>single or an array of URLs in postroll.click TPAT</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the ad<br>2. load each ad types<br>3. play each ad type<br>4. Click CTA button</p>]]></actions>
	<expectedresults><![CDATA[<p>- all TPATs in postroll.click must be fired<br>- the ad is dismissed when it returns from appstore<br>- MREC and FF continue displaying the ad when it returns from appstore</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="POSTROLL_CLICK on Video playing - Legacy Ad">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify POSTROLL_CLICK on Video playing - Legacy Ad</p>]]></summary>
	<preconditions><![CDATA[<p>single or an array of URLs in postroll.click TPAT</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the ad<br>2. load each ad types<br>3. play each ad type<br>4. click the cta_overlay clickable area</p>]]></actions>
	<expectedresults><![CDATA[<p>- all TPATs in postroll.click must be fired at least one time<br>- the video resumes when it returns</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
</testsuite>
<testsuite id="" name="Play Ad - cta_overlay - legacy" >
	<node_order><![CDATA[1]]></node_order>
	<details><![CDATA[]]></details>
<testcase internalid="" name="CTA overlay enabled true and click_area 0">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>CTA overlay enabled true and click_area 0</p>]]></summary>
	<preconditions><![CDATA[<p>&quot;enabled&quot;: true,<br>&quot;click_area&quot;: 0</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. rewrite &quot;cta_overlay&quot; properties with<br>&quot;enabled&quot;: true,<br>&quot;click_area&quot;: 0<br>2. load the ad<br>3. play the ad</p>]]></actions>
	<expectedresults><![CDATA[<p>- CTA button is not displayed<br>- video screen is not clickable</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="CTA overlay enabled false and click_area 0">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>CTA overlay enabled false and click_area 0</p>]]></summary>
	<preconditions><![CDATA[<p>&quot;enabled&quot;: false,<br>&quot;click_area&quot;: 0</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. rewrite &quot;cta_overlay&quot; properties with<br>&quot;enabled&quot;: false,<br>&quot;click_area&quot;: 0<br>2. load the ad<br>3. play the ad</p>]]></actions>
	<expectedresults><![CDATA[<p>- CTA button is not displayed<br>- video screen is not clickable</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="CTA overlay enabled true and click_area 1">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>CTA overlay enabled true and click_area 1</p>]]></summary>
	<preconditions><![CDATA[<p>&quot;enabled&quot;: true,<br>&quot;click_area&quot;: 1</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. rewrite &quot;cta_overlay&quot; properties with<br>&quot;enabled&quot;: true,<br>&quot;click_area&quot;: 1<br>2. load the ad<br>3. play the ad</p>]]></actions>
	<expectedresults><![CDATA[<p>- CTA button is displayed<br>- video screen is clickable</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="CTA overlay enabled false and click_area 1">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>CTA overlay enabled false and click_area 1</p>]]></summary>
	<preconditions><![CDATA[<p>&quot;enabled&quot;: false,<br>&quot;click_area&quot;: 1</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. rewrite &quot;cta_overlay&quot; properties with<br>&quot;enabled&quot;: false,<br>&quot;click_area&quot;: 1<br>2. load the ad<br>3. play the ad</p>]]></actions>
	<expectedresults><![CDATA[<p>- CTA button is not displayed<br>- video screen is clickable</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="CTA overlay Unused keys and values">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>CTA overlay Unused keys and values</p>]]></summary>
	<preconditions><![CDATA[<p>&quot;show_onclick&quot;: false,<br>&quot;time_enabled&quot;: 0,<br>&quot;time_show&quot;: 0,</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load the ad</p>]]></actions>
	<expectedresults><![CDATA[<p>&quot;show_onclick&quot;: false,<br>&quot;time_enabled&quot;: 0,<br>&quot;time_show&quot;: 0,<br>should not be impact on CTA button existence and clickable area</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
</testsuite>
<testsuite id="" name="Play Ad - cta_overlay click (pause and resume)" >
	<node_order><![CDATA[1]]></node_order>
	<details><![CDATA[]]></details>
<testcase internalid="" name="click the clickable area to pause and back to ad to resume the video">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>click the clickable area to pause and back to ad to resume the video<br>- between 0 ~ 0.25<br>- between 0.25 ~ 0.5<br>- between 0.5 ~ 0.75<br>- between 0.75 ~ 1</p>]]></summary>
	<preconditions><![CDATA[<p>&quot;cta_overlay&quot;: {&quot;enabled&quot;: true,<br>&quot;click_area&quot;: 1}</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load ad<br>2. play ad<br>3. observe the play percentage tpat<br>4. click the clickable area to launch the CTA Url at each condition below<br>- between 0 ~ 0.25<br>- between 0.25 ~ 0.5<br>- between 0.5 ~ 0.75<br>- between 0.75 ~ 1<br>5. return to the ad video</p>]]></actions>
	<expectedresults><![CDATA[<p>- it launches CTA url through storekit/app store successfully<br>- the video resumes successfully when it returns to the ad page<br>- TPAT must be fired successfully in order</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="CTA Url with App ID launches through storekit">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>CTA Url with App ID launches through storekit</p>]]></summary>
	<preconditions><![CDATA[<p>&quot;cta_overlay&quot;: {&quot;enabled&quot;: true,<br>&quot;click_area&quot;: 1}<br>CTA Url with app id</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load ad<br>2. play ad<br>3. click the clickable area to launch the CTA Url with App ID on StoreKit<br>4. return to the ad video</p>]]></actions>
	<expectedresults><![CDATA[<p>- it launches CTA url through storekit successfully<br>- the video resumes successfully when it returns to the ad page<br>- TPAT must be fired successfully in order</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="CTA Url with App ID launches through storekit multiple times">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>CTA Url with App ID launches through storekit multiple times</p>]]></summary>
	<preconditions><![CDATA[<p>&quot;cta_overlay&quot;: {&quot;enabled&quot;: true,<br>&quot;click_area&quot;: 1}<br>CTA Url with app id</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load ad<br>2. play ad<br>3. click the clickable area to launch the CTA Url with App ID on StoreKit<br>4. return to the ad video<br>5. repeat step 3-4</p>]]></actions>
	<expectedresults><![CDATA[<p>- it launches CTA url through storekit successfully<br>- the video resumes successfully when it returns to the ad page<br>- TPAT must be fired successfully in order</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="CTA Url without App ID launches through browser">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>CTA Url without App ID launches through browser</p>]]></summary>
	<preconditions><![CDATA[<p>&quot;cta_overlay&quot;: {&quot;enabled&quot;: true,<br>&quot;click_area&quot;: 1}<br>CTA Url without app id</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load ad<br>2. play ad<br>3. click the clickable area to launch the CTA Url without App ID on browser<br>4. return to the ad video</p>]]></actions>
	<expectedresults><![CDATA[<p>- it launches CTA url through browser successfully<br>- the video resumes successfully when it returns to the ad page<br>- TPAT must be fired successfully in order</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="CTA Url without App ID launches through browser multiple times">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>CTA Url without App ID launches through browser multiple times</p>]]></summary>
	<preconditions><![CDATA[<p>&quot;cta_overlay&quot;: {&quot;enabled&quot;: true,<br>&quot;click_area&quot;: 1}<br>CTA Url without app id</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load ad<br>2. play ad<br>3. click the clickable area to launch the CTA Url without App ID on browser<br>4. return to the ad video<br>5. repeat step 3-4</p>]]></actions>
	<expectedresults><![CDATA[<p>- it launches CTA url through browser successfully<br>- the video resumes successfully when it returns to the ad page<br>- TPAT must be fired successfully in order</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="pause and resume on the ad without Endcard">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify pause and resume on the ad without Endcard</p>]]></summary>
	<preconditions><![CDATA[<p>&quot;cta_overlay&quot;: {&quot;enabled&quot;: true,<br>&quot;click_area&quot;: 1}<br>No Endcard</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load ad<br>2. play ad<br>3. click the clickable area to launch the CTA Url<br>4. return to the ad video</p>]]></actions>
	<expectedresults><![CDATA[<p>- it launches CTA url through browser successfully<br>- the video resumes successfully when it returns to the ad page<br>- TPAT must be fired successfully in order</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="Bring the ad to foreground instead of returning to the ad by clicking button on AppStore - Video">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Bring the ad to foreground instead of returning to the ad by clicking button on AppStore - Video</p>]]></summary>
	<preconditions><![CDATA[<p>&quot;cta_overlay&quot;: {&quot;enabled&quot;: true,<br>&quot;click_area&quot;: 1}<br>CTA Url without app id</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load ad<br>2. play ad<br>3. click the clickable area to launch the CTA Url without App ID through Browser<br>4. bring the ad in foreground</p>]]></actions>
	<expectedresults><![CDATA[<p>- The video resumes when the ad is launched in foreground</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="Kill browser during the video play is paused">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Kill browser during the video play is paused</p>]]></summary>
	<preconditions><![CDATA[<p>&quot;cta_overlay&quot;: {&quot;enabled&quot;: true,<br>&quot;click_area&quot;: 1}</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load ad<br>2. play ad<br>3. click the clickable area to launch the CTA Url without app ID through browser<br>4. kill the browser<br>5. bring the ad in foreground</p>]]></actions>
	<expectedresults><![CDATA[<p>- The video resumes when the ad is launched in foreground</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="Kill app store on EndCard">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Kill app store on EndCard</p>]]></summary>
	<preconditions><![CDATA[<p>&quot;cta_overlay&quot;: {&quot;enabled&quot;: true,<br>&quot;click_area&quot;: 1}</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load ad<br>2. play ad<br>3. wait until it moves to EndCard<br>4. click CTA button to launch the CTA Url through App Store<br>5. Kill the app store</p>]]></actions>
	<expectedresults><![CDATA[<p>The ad is closed when the CTA button is clicked on EndCard</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="pause and resume with no postbundle ad">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify pause and resume with no postbundle ad</p>]]></summary>
	<preconditions><![CDATA[<p>set Creatives without EndCard</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load the legacy ad without postbundle<br>2. play ad<br>3. click cta_overlay clickable area on video</p>]]></actions>
	<expectedresults><![CDATA[<p>CTA is clicked and opens storekit, appstore, browser<br>Video resumes when it returns to ad playback page<br>POSTROLL_CLICK TPAT is fired</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="the contents of userActions and clickedThrough for cta_overlay">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify the contents of userActions and clickedThrough for cta_overlay</p>]]></summary>
	<preconditions><![CDATA[<p>&quot;cta_overlay&quot;: {&quot;enabled&quot;: true,<br>&quot;click_area&quot;: 1}</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load ad<br>2. play ad<br>3. try multiple CTA clickable area click on video<br>4. Close the ad<br>5. Observe /report_ad</p>]]></actions>
	<expectedresults><![CDATA[<p>the same number of &quot;cta&quot; is included in &quot;userActions&quot; and &quot;clickedThrough&quot;<br>/report_ad request payload must have &quot;userAction&quot; information<br>&quot;userAction&quot; and &quot;clickThrough&quot; must be matched</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
</testsuite>
<testsuite id="" name="Play Ad - Mute/Unmute" >
	<node_order><![CDATA[1]]></node_order>
	<details><![CDATA[]]></details>
<testcase internalid="" name="start video play on mute">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify start video play on mute</p>]]></summary>
	<preconditions><![CDATA[<p>set option as MUTE</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load ad<br>2. play ad</p>]]></actions>
	<expectedresults><![CDATA[<p>Ad video plays with Mute ON</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="start video play on unmute">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify start video play on unmute</p>]]></summary>
	<preconditions><![CDATA[<p>set option as UNMUTE</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load ad<br>2. play ad</p>]]></actions>
	<expectedresults><![CDATA[<p>Ad video plays with Mute OFF</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="the volume change on Mute state">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify the volume change on Mute state</p>]]></summary>
	<preconditions><![CDATA[<p>set option as MUTE</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load ad<br>2. play ad<br>3. change the volume</p>]]></actions>
	<expectedresults><![CDATA[<p>Persist in Mute state</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
</testsuite>
<testsuite id="" name="Play Ad - Orientation" >
	<node_order><![CDATA[1]]></node_order>
	<details><![CDATA[]]></details>
<testcase internalid="" name="the video orientation in portrait view only">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify the video orientation in portrait view only</p>]]></summary>
	<preconditions><![CDATA[<p>set Orientation Lock to Portrait</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load ad<br>2. Play the ad<br>3. toggle the orientation while the ad plays</p>]]></actions>
	<expectedresults><![CDATA[<p>- video displays in portrait view only</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="the video orientation in landscape view only">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify the video orientation in landscape view only</p>]]></summary>
	<preconditions><![CDATA[<p>set Orientation Lock to Landscape</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load ad<br>2. Play the ad<br>3. toggle the orientation while the ad plays</p>]]></actions>
	<expectedresults><![CDATA[<p>- video displays in landscape view only</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="the video orientation in both">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify the video orientation in both</p>]]></summary>
	<preconditions><![CDATA[<p>set Orientation Lock to Unknown<br>set &quot;video orientation override&quot; to &quot;both&quot; in placement</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load ad<br>2. Play the ad<br>3. toggle the orientation while the ad plays</p>]]></actions>
	<expectedresults><![CDATA[<p>- video orientation toggles between landscape view and portrait view by the device orientation change</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
</testsuite>
<testsuite id="" name="Play Ad - Progress bar" >
	<node_order><![CDATA[1]]></node_order>
	<details><![CDATA[]]></details>
<testcase internalid="" name="progress bar while the video is playing">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>progress bar while the video is playing</p>]]></summary>
	<preconditions><![CDATA[<p></p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load ad<br>2. Play the ad<br>3. observe the video</p>]]></actions>
	<expectedresults><![CDATA[<p>- progress bar syncs with the video play progress</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="progress bar sync after device feature interruptions">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>progress bar sync when<br>- the device is locked and unlocked<br>- background/foreground<br>- pause and resume by CTA click</p>]]></summary>
	<preconditions><![CDATA[<p></p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load ad<br>2. Play the ad<br>3. observe the video<br>4. interrupt the video playback by device lock, background, cta_overlay click.<br>5. relaunch the video playback</p>]]></actions>
	<expectedresults><![CDATA[<p>- progress bar syncs with the video play progress when it is relaunched</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
</testsuite>
<testsuite id="" name="Play Ad - Close Video" >
	<node_order><![CDATA[1]]></node_order>
	<details><![CDATA[]]></details>
<testcase internalid="" name="close button with showClose 0">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>close button - &quot;showClose&quot; : 0</p>]]></summary>
	<preconditions><![CDATA[<p>&quot;showClose&quot; : 0</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load each ad<br>2. play each ad<br>3. observe Close button</p>]]></actions>
	<expectedresults><![CDATA[<p>- display &quot;Close&quot; button when the video starts</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="close button with showClose less than the length of video">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>close button - &quot;showClose&quot; : < the length of video</p>]]></summary>
	<preconditions><![CDATA[<p>&quot;showClose&quot; : < the length of video</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load each ad<br>2. play each ad<br>3. observe Close button</p>]]></actions>
	<expectedresults><![CDATA[<p>- display &quot;Close&quot; button after the defined time</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="close button with showClose longer than the length of video">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>close button - &quot;showClose&quot; : > the length of video</p>]]></summary>
	<preconditions><![CDATA[<p>&quot;showClose&quot; : > the length of video</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load each ad<br>2. play each ad<br>3. observe Close button</p>]]></actions>
	<expectedresults><![CDATA[<p>- &quot;close&quot; button never show</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="incentized Close">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>incentized Close</p>]]></summary>
	<preconditions><![CDATA[<p>incentized enabled</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load the incentivized ad<br>2. play the ad<br>3. observe Close button<br>4. click close button on Video</p>]]></actions>
	<expectedresults><![CDATA[<p>- it pops up the alert message with the predefined incentized text</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
</testsuite>
<testsuite id="" name="Plad Ad - FlexView" >
	<node_order><![CDATA[1]]></node_order>
	<details><![CDATA[]]></details>
<testcase internalid="" name="FlexView Timeout - none">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify FlexView Timeout - none</p>]]></summary>
	<preconditions><![CDATA[<p>set FlexView Timeout to none</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load the FlexView Ad<br>2. Play the ad</p>]]></actions>
	<expectedresults><![CDATA[<p>the ad does not time out</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="FlexView Timeout - shorter than vidoe length">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify FlexView Timeout - shorter than vidoe length</p>]]></summary>
	<preconditions><![CDATA[<p>set FlexView Timeout to shorter than the video length</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load the FlexView Ad<br>2. Play the ad</p>]]></actions>
	<expectedresults><![CDATA[<p>the ad dismisses during the video is playing</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="FlexView Timeout - interrupt before the timeout">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify FlexView Timeout - interrupt before the timeout</p>]]></summary>
	<preconditions><![CDATA[<p>set FlexView Timeout</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load the FlexView Ad<br>2. Play the ad<br>3. Click CTA button before the timeout</p>]]></actions>
	<expectedresults><![CDATA[<p>the ad dismisses when CTA is clicked before time out</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
</testsuite>
<testsuite id="" name="Play Ad - Moat" >
	<node_order><![CDATA[1]]></node_order>
	<details><![CDATA[]]></details>
<testcase internalid="" name="MOAT enabled">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>MOAT enabled</p>]]></summary>
	<preconditions><![CDATA[<p>Set MOAT enabled in campaign</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load ad with MOAT enabled<br>2. play the ad<br>3. observe moat log and moat site update</p>]]></actions>
	<expectedresults><![CDATA[<p>/ads respnonse shows<br>&quot;tpat&quot;-> &quot;moat&quot; -> &quot;is_enabled&quot;: true<br>MOAT log is generated</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="MOAT disabled">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>MOAT disabled</p>]]></summary>
	<preconditions><![CDATA[<p>Set MOAT disabled in campaign</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load ad with MOAT enabled<br>2. play the ad<br>3. observe moat log and moat site update</p>]]></actions>
	<expectedresults><![CDATA[<p>/ads respnonse shows<br>&quot;tpat&quot;-> &quot;moat&quot; -> &quot;is_enabled&quot;: false<br>MOAT log is not generated</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="MOAT track - audio levels">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>MOAT track - audio levels</p>]]></summary>
	<preconditions><![CDATA[<p>Set MOAT enabled in campaign</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load ad with MOAT enabled<br>2. play the ad<br>3. change the volume of the video<br>3. observe moat log and moat site update</p>]]></actions>
	<expectedresults><![CDATA[<p>the volume level in MOAT log is updated</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="MOAT track - video start">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>MOAT track - video start</p>]]></summary>
	<preconditions><![CDATA[<p>Set MOAT enabled in campaign</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load ad with MOAT enabled<br>2. play the ad<br>3. observe moat log and moat site update</p>]]></actions>
	<expectedresults><![CDATA[<p>MOAT log contains the video start log</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="MOAT track - video quartile levels">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>MOAT track - video quartile levels</p>]]></summary>
	<preconditions><![CDATA[<p>Set MOAT enabled in campaign</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load ad with MOAT enabled<br>2. play the ad<br>3. observe moat log and moat site update</p>]]></actions>
	<expectedresults><![CDATA[<p>MOAT log updates video quartile level</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
</testsuite>
<testsuite id="" name="Play Ad - incentivized ad" >
	<node_order><![CDATA[1]]></node_order>
	<details><![CDATA[]]></details>
<testcase internalid="" name="the default incentivized text">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify the default incentivized text</p>]]></summary>
	<preconditions><![CDATA[<p>Set incentivized title, button and message in platform</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load the incentivized ad<br>2. while the video is played, close the video<br>3. observe the popup<br>4. click &quot;continue&quot; or &quot;close&quot;</p>]]></actions>
	<expectedresults><![CDATA[<p>the incentivized popup is displayed with continue and close button<br>all text strings in the popup match with the information in /ads payload<br>when continue is clicked, the vidoe resumes at the point when the video playback is interrupted<br>when close is clicked, the video playback is closed</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="the custom incentivized text">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify the custom incentivized text</p>]]></summary>
	<preconditions><![CDATA[<p>Set incentivized title, button and message in platform<br>update the title, button, and message through option</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load the incentivized ad<br>2. update the incentivized contents information through Option<br>2. while the video is played, close the video</p>]]></actions>
	<expectedresults><![CDATA[<p>the incentivized popup is displayed with continue and close button<br>all text strings in the popup match with the updated contents through Option</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="the incentivized text with invalid characters">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify the incentivized text with invalid characters</p>]]></summary>
	<preconditions><![CDATA[<p>Set incentivized title, button and message in platform<br>update some of the title, button, and message with invalid characters through option</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load the incentivized ad<br>2. update the incentivized contents information as invalid character through Option<br>2. while the video is played, close the video</p>]]></actions>
	<expectedresults><![CDATA[<p>Need to find out the invalid character and what's the UI response</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="incentivized popup interruptions">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify incentivized popup interruption<br>- background, device lock</p>]]></summary>
	<preconditions><![CDATA[<p>Set incentivized title, button and message in platform</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load the incentivized ad<br>2. while the video is played, close the video<br>3. observe the popup displayed<br>4. lock the device<br>5. unlock the device<br>6. the ad is relaunched<br>7. click &quot;continu&quot; or &quot;close&quot;<br>8. repeat step 1 to 7 with background interruption</p>]]></actions>
	<expectedresults><![CDATA[<p>incentivized popup must be persisted when it returns from the interruption<br>when continue is clicked, the vidoe resumes at the point when the video playback is interrupted<br>when close is clicked, the video playback is closed</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
</testsuite>
<testsuite id="" name="Play Ad - rewarded Ad" >
	<node_order><![CDATA[1]]></node_order>
	<details><![CDATA[]]></details>
<testcase internalid="" name="rewarded scenario before the video reaches to 75%">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify rewarded scenario before the video reaches to 75%</p>]]></summary>
	<preconditions><![CDATA[<p>rewarded ads</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load the rewarded ad<br>2. play the ad<br>3. click cta_overlay clickable area before the video playback reaches to 75%</p>]]></actions>
	<expectedresults><![CDATA[<p>It pauses the video and open app store/storekit/playstore/browser<br>the video resume when it moves back to the ad</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="rewarded scenario after the video reaches to 75%">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify rewarded scenario after the video reaches to 75%</p>]]></summary>
	<preconditions><![CDATA[<p>rewarded ads</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load the rewarded ad<br>2. play the ad<br>3. click cta_overlay clickable area after the video playback passes 75%</p>]]></actions>
	<expectedresults><![CDATA[<p>it closes the video and move to Endcard</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
</testsuite>
<testsuite id="" name="Play Ad - MREC" >
	<node_order><![CDATA[1]]></node_order>
	<details><![CDATA[]]></details>
<testcase internalid="" name="the UI element of Video">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify the UI element of Video</p>]]></summary>
	<preconditions><![CDATA[<p>Set dimension as W X H = 300 X 250</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. Play ad</p>]]></actions>
	<expectedresults><![CDATA[<p>Video is displayed in the right dimension</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="FlexFeed configurations">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify FlexFeed ad play with the following conditions<br>- no dimension is provided<br>- only one dimension is provided<br>- two valid dimensions are provided<br>- wrong size dimensions is provided</p>]]></summary>
	<preconditions><![CDATA[<p>None</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load the ad<br>2. open Options to set the dimension<br>3. set the dimension at each condition<br>- no dimension (W X H = empty X empty)<br>- only one correct dimension is provided (W X H = 300 X empty)<br>- two valid dimensions are provided (W X H = 300 X 250)<br>- wrong dimension is provided (W X H = 300 X 200)<br>4. Save the option<br>3. play the ad</p>]]></actions>
	<expectedresults><![CDATA[<p>Only if the dimension sets as W X H = 300 X 250, it plays the MREC ad successfully. Others pops up error message without playing the ad</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="the MREC ad keeps reloading after the ad is closed">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify the MREC ad keeps reloading after the ad is closed</p>]]></summary>
	<preconditions><![CDATA[<p>Set dimension as W X H = 300 X 250<br>Non auto-cacheable placement</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p></p>]]></actions>
	<expectedresults><![CDATA[<p>The ad is closed successfully<br>the ad is auto-cached whatever the auto-cacheable sets YES or NO</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="the MREC ad reloading multiple times">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify the MREC ad reloading multiple times</p>]]></summary>
	<preconditions><![CDATA[<p>Set dimension as W X H = 300 X 250<br>Non auto-cacheable placement</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. Play ad<br>2. close the ad</p>]]></actions>
	<expectedresults><![CDATA[<p>The ad is closed successfully<br>the ad is auto-cached whenever the ad is played</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="the auto loaded MREC is cleared after re-initialization">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify the auto loaded MREC is cleared after re-initialization</p>]]></summary>
	<preconditions><![CDATA[<p>Set dimension as W X H = 300 X 250<br>Non auto-cacheable placement</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. Play ad<br>2. close the ad<br>3. observe the ad is auto-cached<br>4. kill the app<br>5. re-initialize the app</p>]]></actions>
	<expectedresults><![CDATA[<p>the cached MREC ad is cleared and not playable</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="MREC ad play after device feature interruption">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify the ad play when it returns from interruption<br>- the device is locked and unlocked<br>- background/foreground<br>- pause and resume by CTA click</p>]]></summary>
	<preconditions><![CDATA[<p>Set dimension as W X H = 300 X 250</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. Play ad<br>2. interrupt the ad playback<br>- lock/unlock the device and relaunch the ad<br>- put the ad in background and bring it back to foreground<br>- click CTA button to App Store and return to Ad</p>]]></actions>
	<expectedresults><![CDATA[<p>whenever the ad video play is resumed, the ad plays successfully</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
</testsuite>
<testsuite id="" name="Play Ad - FlexFeed Collection View" >
	<node_order><![CDATA[1]]></node_order>
	<details><![CDATA[]]></details>
<testcase internalid="" name="the UI element of Video on collection view">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify the UI element of Video on collection view</p>]]></summary>
	<preconditions><![CDATA[<p>Set dimension as W X H = 300 X 250<br>Collection View</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load FlexFeed Ad<br>2. Play the FlectFeed Ad on Collection View</p>]]></actions>
	<expectedresults><![CDATA[<p>Video is displayed in the right dimension on collection view</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="the orientation of Video on collection view">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify the orientation of Video on collection view</p>]]></summary>
	<preconditions><![CDATA[<p>Set dimension as W X H = 300 X 250<br>Collection View</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load FlexFeed Ad<br>2. Play the FlectFeed Ad on Collection View<br>3. change the orientation</p>]]></actions>
	<expectedresults><![CDATA[<p>Video is displayed on collection view when the orientation is changed</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="FlexFeed ad play after device interruption">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify the ad play when it returns from interruption<br>- the device is locked and unlocked<br>- background/foreground<br>- pause and resume by CTA click</p>]]></summary>
	<preconditions><![CDATA[<p>Set dimension as W X H = 300 X 250<br>Collection View</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load FlexFeed Ad<br>2. Play the FlectFeed Ad on Collection View<br>3. interrupt the ad by each condition<br>4. relaunch the ad</p>]]></actions>
	<expectedresults><![CDATA[<p>whenever the ad video play is resumed, the ad plays successfully on collection view</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
</testsuite>
<testsuite id="" name="Play Ad - device interruption" >
	<node_order><![CDATA[1]]></node_order>
	<details><![CDATA[]]></details>
<testcase internalid="" name="video playback interruption by usb charger plug in">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify video playback interruption by usb charger plug in</p>]]></summary>
	<preconditions><![CDATA[<p>USB charger cable is ready</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load an ad and play the video<br>2. plug in the USB charger cable at video playback and Endcard</p>]]></actions>
	<expectedresults><![CDATA[<p>USB charger status update should not affect on ad playback</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="video playback interruption by usb charger plug out">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify video playback interruption by usb charger plug out</p>]]></summary>
	<preconditions><![CDATA[<p>USB charger cable is ready</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. plug in the USB charger cable<br>2. load an ad and play the video<br>3. unplug the USB charger cable at video playback and Endcard</p>]]></actions>
	<expectedresults><![CDATA[<p>USB charger status update should not affect on ad playback</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
</testsuite>
<testsuite id="" name="CTA response on Endcard" >
	<node_order><![CDATA[1]]></node_order>
	<details><![CDATA[]]></details>
<testcase internalid="" name="CTA response - legacy (two page ad)">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify CTA response - legacy (two page ad)</p>]]></summary>
	<preconditions><![CDATA[<p>CTA url with<br>- app id (storekit)<br>- http url with app id(appstore)<br>- normal url (browser)</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load the legacy ad<br>2. play the ad<br>3. click cta_overlay clickable area<br>4. repeat with each type of CTA Url (app id, http url with app id, normal url)</p>]]></actions>
	<expectedresults><![CDATA[<p>open storekit, appstore, browser by each type of CTA url<br>resume the video when it returns to the ad</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="CTA response - Flexview, Flexfeed, Mraid (single page ad)">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify CTA response - Flexview, Flexfeed, Mraid (single page ad)</p>]]></summary>
	<preconditions><![CDATA[<p>CTA url with<br>- app id (storekit)<br>- http url with app id(appstore)<br>- normal url (browser)</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load the dynamic template ads<br>2. play the ad<br>3. click CTA button<br>4. repeat with each type of CTA Url (app id, http url with app id, normal url)</p>]]></actions>
	<expectedresults><![CDATA[<p>open storekit, appstore, browser by each type of CTA url</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="CTA response on EndCard">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify CTA response on EndCard</p>]]></summary>
	<preconditions><![CDATA[<p>CTA url with<br>- app id (storekit)<br>- http url with app id(appstore)<br>- normal url (browser)</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load the legacy ad<br>2. play the ad<br>3. move to EndCard<br>3. click CTA button<br>4. repeat with each type of CTA Url (app id, http url with app id, normal url)</p>]]></actions>
	<expectedresults><![CDATA[<p>open storekit, appstore, browser by each type of CTA url</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="the ad without postBundle (EndCard)">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify the ad without postBundle (EndCard)</p>]]></summary>
	<preconditions><![CDATA[<p>set Creatives without EndCard</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load an legacy ad without EndCard (No postbundle)<br>2. play the ad<br>3. wait for play plays in full or close the video</p>]]></actions>
	<expectedresults><![CDATA[<p>it displays Appstore without showing Endcard</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
</testsuite>
<testsuite id="" name="Report Ad" >
	<node_order><![CDATA[1]]></node_order>
	<details><![CDATA[]]></details>
<testcase internalid="" name="the stored /report_ad by airplane mode, network disable">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify the stored /report_ad by airplane mode, network disable</p>]]></summary>
	<preconditions><![CDATA[<p></p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>need to find out the steps to test</p>]]></actions>
	<expectedresults><![CDATA[<p>- No /report_ad is called with network disabled<br>- stored /report_ad is called after network is restored</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="the contents of userActions and clickedThrough">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify the contents of userActions and clickedThrough</p>]]></summary>
	<preconditions><![CDATA[<p></p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load ad<br>2. play ad<br>3. generate all userActions - mute/unmute multiple times, close video, click CTA<br>4. Close the ad<br>5. Observe /report_ad</p>]]></actions>
	<expectedresults><![CDATA[<p>all generated userActions are recorded in &quot;userActions&quot; and &quot;clickedThrough&quot;<br>- download, cta, mute, unmute, video_close, ...</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="the consistency of userActions and clickedThrough contents">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify the consistency of userActions and clickedThrough contents</p>]]></summary>
	<preconditions><![CDATA[<p></p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load ad<br>2. play ad<br>3. try multiple CTA clickable area click on video<br>4. Close the ad<br>5. Observe /report_ad</p>]]></actions>
	<expectedresults><![CDATA[<p>the same number of &quot;cta&quot; is included in &quot;userActions&quot; and &quot;clickedThrough&quot;<br>/report_ad request payload must have &quot;userAction&quot; information<br>&quot;userAction&quot; and &quot;clickThrough&quot; must be matched</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
</testsuite>
<testsuite id="" name="Version Upgrade" >
	<node_order><![CDATA[1]]></node_order>
	<details><![CDATA[]]></details>
<testcase internalid="" name="the upgrade after fresh installation">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify the upgrade after fresh installation<br><br>Fresh installation -> Upgrade</p>]]></summary>
	<preconditions><![CDATA[<p>Prepare the lastest public released version</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. install the latest public released version<br>2. upgrade to the new version<br>3. initialize the app<br>4. load and play the ad<br>5. close the ad</p>]]></actions>
	<expectedresults><![CDATA[<p>initialization, load ad, play ad must work successfully after upgrade</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="the upgrade after initialization">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify the upgrade after initialization<br><br>Installation -> initialization -> upgrade</p>]]></summary>
	<preconditions><![CDATA[<p>Prepare the lastest public released version</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. install the latest public released version<br>2. initialize the app<br>3. upgrade to the new version<br>4. initialize the app<br>5. load and play the ad<br>6. close the ad</p>]]></actions>
	<expectedresults><![CDATA[<p>initialization, load ad, play ad must work successfully after upgrade</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="the upgrade after initialization and kill the app">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify the upgrade after initialization<br><br>Installation -> initialization -> kill the app -> upgrade</p>]]></summary>
	<preconditions><![CDATA[<p>Prepare the lastest public released version</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. install the latest public released version<br>2. initialize the app<br>3. kill the app<br>4. upgrade to the new version<br>5. initialize the app<br>6. load and play the ad</p>]]></actions>
	<expectedresults><![CDATA[<p>initialization, load ad, play ad must work successfully after upgrade</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="the upgrade after multiple ad plays">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify the upgrade after multiple ad plays<br><br>Installation -> initialization -> play ads -> upgrade</p>]]></summary>
	<preconditions><![CDATA[<p>Prepare the lastest public released version</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. install the latest public released version<br>2. initialize the app<br>3. load, play and close the ad multiple times<br>4. upgrade to the new version<br>5. initialize the app<br>6. load and play the ad</p>]]></actions>
	<expectedresults><![CDATA[<p>initialization, load ad, play ad must work successfully after upgrade</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="the upgrade during ad play in background">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify the upgrade during ad play<br><br>Play ad (video) -> background -> upgrade</p>]]></summary>
	<preconditions><![CDATA[<p>Prepare the lastest public released version</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. install the latest public released version<br>2. initialize the app<br>3. load ad and play the ad<br>4. put the ad in background during the video is playing<br>5. upgrade to the new version<br>6. initialize the app<br>7. load and play the ad</p>]]></actions>
	<expectedresults><![CDATA[<p>initialization, load ad, play ad must work successfully after upgrade</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="the upgrade after ad play interuption by closing the ad during the video is playing">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify the upgrade after ad play interuption by closing the ad during the video is playing<br><br>Play ad (video) -> kill the ad -> upgrade</p>]]></summary>
	<preconditions><![CDATA[<p>Prepare the lastest public released version</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. install the latest public released version<br>2. initialize the app<br>3. load and play the ad<br>4. kill the app during the video is playing<br>5. upgrade the app<br>6. initialize the app<br>7. load and play the ad</p>]]></actions>
	<expectedresults><![CDATA[<p>initialization, load ad, play ad must work successfully after upgrade</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="the upgrade when StoreKit is displayed by CTA or CTA Overlay on video">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify the upgrade when StoreKit is displayed by CTA or CTA Overlay on video<br><br>Play ad (video) -> CTA or CTA overlay click -> storekit -> background -> upgrade</p>]]></summary>
	<preconditions><![CDATA[<p>Prepare the lastest public released version</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. install the latest public released version<br>2. initialize the app<br>3. load ad and play the ad<br>4. click Video to open StoreKit<br>4. put the ad with StoreKit in background<br>5. upgrade to the new version<br>6. initialize the app<br>7. load and play the ad</p>]]></actions>
	<expectedresults><![CDATA[<p>initialization, load ad, play ad must work successfully after upgrade</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="the upgrade after ad play interuption by closing the ad on StoreKit  Play ad (video) -> CTA or CTA Overlay click -> Storekit -> kill the ad -> upgrade">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify the upgrade after ad play interuption by closing the ad on StoreKit<br><br>Play ad (video) -> CTA or CTA Overlay click -> Storekit -> kill the ad -> upgrade</p>]]></summary>
	<preconditions><![CDATA[<p>Prepare the lastest public released version</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. install the latest public released version<br>2. initialize the app<br>3. load and play the ad<br>4. click CTA overlay to open StoreKit<br>5. kill the app during StoreKit is shown<br>6. upgrade the app<br>7. initialize the app<br>8. load and play the ad</p>]]></actions>
	<expectedresults><![CDATA[<p>initialization, load ad, play ad must work successfully after upgrade</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="the upgrade after ad play interuption by putting the ad in background during EndCard is shown">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify the upgrade after ad play interuption by putting the ad in background during EndCard is shown<br><br>Endcard -> background -> upgrade</p>]]></summary>
	<preconditions><![CDATA[<p>Prepare the lastest public released version</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. install the latest public released version<br>2. initialize the app<br>3. load ad and play the ad<br>4. move to Endcard<br>4. put the ad in background<br>5. upgrade to the new version<br>6. initialize the app<br>7. load and play the ad</p>]]></actions>
	<expectedresults><![CDATA[<p>initialization, load ad, play ad must work successfully after upgrade</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="the upgrade after ad play interuption by closing the ad during EndCard is shown">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify the upgrade after ad play interuption by closing the ad during EndCard is shown<br><br>Endcard -> kill the ad -> upgrade</p>]]></summary>
	<preconditions><![CDATA[<p>Prepare the lastest public released version</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. install the latest public released version<br>2. initialize the app<br>3. load and play the ad<br>4. move to Endcard<br>5. kill the app during Endcard is shown<br>6. upgrade the app<br>7. initialize the app<br>8. load and play the ad</p>]]></actions>
	<expectedresults><![CDATA[<p>initialization, load ad, play ad must work successfully after upgrade</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="the upgrade when StoreKit is displayed by CTA on EndCard">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify the upgrade when StoreKit is displayed by CTA on Endcard<br><br>EndCard -> CTA click -> storekit/appstore -> background -> upgrade</p>]]></summary>
	<preconditions><![CDATA[<p>Prepare the lastest public released version</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. install the latest public released version<br>2. initialize the app<br>3. load ad and play the ad<br>4. move to Endcard<br>4. click CTA to open StoreKit/Appstore<br>4. put the ad with StoreKit/Appstore in background<br>5. upgrade to the new version<br>6. initialize the app<br>7. load and play the ad</p>]]></actions>
	<expectedresults><![CDATA[<p>initialization, load ad, play ad must work successfully after upgrade</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="the upgrade when StoreKit is displayed by CTA on Endcard and kill the ad">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify the upgrade when StoreKit is displayed by CTA on Endcard<br><br>EndCard -> CTA click -> storekit/appstore -> kill the ad -> upgrade</p>]]></summary>
	<preconditions><![CDATA[<p>Prepare the lastest public released version</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. install the latest public released version<br>2. initialize the app<br>3. load ad and play the ad<br>4. move to Endcard<br>4. click CTA to open StoreKit/Appstore<br>4. kill the app<br>5. upgrade to the new version<br>6. initialize the app<br>7. load and play the ad</p>]]></actions>
	<expectedresults><![CDATA[<p>initialization, load ad, play ad must work successfully after upgrade</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="the upgrade during assets are downloading">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify the upgrade during assets are downloading<br><br>Load Ad -> assets are downloading -> background -> upgrade</p>]]></summary>
	<preconditions><![CDATA[<p>Prepare the lastest public released version</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. install the latest public released version<br>2. initialize the app<br>3. load ad<br>4. put the ad in background during the asset is downloading<br>5. upgrade the app<br>6. initialize the app<br>7. load and play the ad</p>]]></actions>
	<expectedresults><![CDATA[<p>initialization, load ad, play ad must work successfully after upgrade</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="the upgrade during assets are downloading and kill the app">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify the upgrade during assets are downloading<br><br>Load Ad -> assets are downloading -> kill the app -> upgrade</p>]]></summary>
	<preconditions><![CDATA[<p>Prepare the lastest public released version</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. install the latest public released version<br>2. initialize the app<br>3. load ad<br>4. kill the app during the asset is downloading<br>5. upgrade the app<br>6. initialize the app<br>7. load and play the ad</p>]]></actions>
	<expectedresults><![CDATA[<p>initialization, load ad, play ad must work successfully after upgrade</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
</testsuite>
<testsuite id="" name="API Payload" >
	<node_order><![CDATA[1]]></node_order>
	<details><![CDATA[]]></details>
<testcase internalid="" name="Request API Payloa - &quot;app&quot;">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Request API Payload to verify the information of &quot;app&quot;</p>]]></summary>
	<preconditions><![CDATA[<p></p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app to call /config API<br>2. load an ad to call /ads API<br>3. play an ad to call /will_play_ad<br>4. close the ad to call /report_ad</p>]]></actions>
	<expectedresults><![CDATA[<p>&quot;id&quot; matches to App ID<br>&quot;bundle&quot; matches to test app bundle name<br>&quot;ver&quot; matches to test app version</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="Request API Payload - &quot;device&quot;">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Request API Payload to verify the information of &quot;device&quot;</p>]]></summary>
	<preconditions><![CDATA[<p></p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app to call /config API<br>2. load an ad to call /ads API<br>3. play an ad to call /will_play_ad<br>4. close the ad to call /report_ad</p>]]></actions>
	<expectedresults><![CDATA[<p>&quot;make&quot;<br>&quot;os&quot;<br>&quot;model&quot;<br>&quot;osv&quot;</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="Request API Payload - moat viewability ON">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Request API Payload to verify moat viewability</p>]]></summary>
	<preconditions><![CDATA[<p>set moat ON in campaign</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app to call /config API<br>2. load an ad to call /ads API<br>3. play an ad to call /will_play_ad<br>4. close the ad to call /report_ad</p>]]></actions>
	<expectedresults><![CDATA[<p>&quot;viewability&quot;: true</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="Request API Payload - moat viewability OFF">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Request API Payload to verify moat viewability</p>]]></summary>
	<preconditions><![CDATA[<p>set moat OFF in campaign</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app to call /config API<br>2. load an ad to call /ads API<br>3. play an ad to call /will_play_ad<br>4. close the ad to call /report_ad</p>]]></actions>
	<expectedresults><![CDATA[<p>&quot;viewability&quot;: false</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="Request API Payload - &quot;vungle&quot;->&quot;is_google_play_services_available&quot;">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Request API Payload to verify the information of &quot;vungle&quot;->&quot;is_google_play_services_available&quot;</p>]]></summary>
	<preconditions><![CDATA[<p>google service available device</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app to call /config API<br>2. load an ad to call /ads API<br>3. play an ad to call /will_play_ad<br>4. close the ad to call /report_ad</p>]]></actions>
	<expectedresults><![CDATA[<p>&quot;is_google_play_services_available&quot;: true</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="Request API Payload - &quot;vungle&quot;->&quot;is_google_play_services_available&quot; on Amazon, Chinese model">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Request API Payload to verify the information of &quot;vungle&quot;->&quot;is_google_play_services_available&quot; on Amazon, Chinese model</p>]]></summary>
	<preconditions><![CDATA[<p>google service disabled device - Amazon, Chinese</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app to call /config API<br>2. load an ad to call /ads API<br>3. play an ad to call /will_play_ad<br>4. close the ad to call /report_ad</p>]]></actions>
	<expectedresults><![CDATA[<p>&quot;is_google_play_services_available&quot;: false</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="Request API Payload - &quot;vungle&quot;->&quot;battery_level&quot;">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Request API Payload to verify the information of &quot;vungle&quot;->&quot;battery_level&quot;</p>]]></summary>
	<preconditions><![CDATA[<p>read the current battery level from device</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app to call /config API<br>2. load an ad to call /ads API<br>3. play an ad to call /will_play_ad<br>4. close the ad to call /report_ad</p>]]></actions>
	<expectedresults><![CDATA[<p>the value of &quot;battery_level&quot; matches to the one of the device</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="Request API Payload - &quot;vungle&quot;->&quot;battery_state&quot; when charger cable is plugged">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Request API Payload to verify the information of &quot;vungle&quot;->&quot;battery_state&quot; when charger cable is plugged</p>]]></summary>
	<preconditions><![CDATA[<p>charger cable is plugged</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app to call /config API<br>2. load an ad to call /ads API<br>3. play an ad to call /will_play_ad<br>4. close the ad to call /report_ad</p>]]></actions>
	<expectedresults><![CDATA[<p>&quot;battery_state&quot; reflects to the state of charger cable plug</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="Request API Payload - &quot;vungle&quot;->&quot;battery_state&quot; when charger cable is unplugged">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Request API Payload to verify the information of &quot;vungle&quot;->&quot;battery_state&quot; when charger cable is unplugged</p>]]></summary>
	<preconditions><![CDATA[<p>charger cable is unplugged</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app to call /config API<br>2. load an ad to call /ads API<br>3. play an ad to call /will_play_ad<br>4. close the ad to call /report_ad</p>]]></actions>
	<expectedresults><![CDATA[<p>&quot;battery_state&quot; reflects to the state of charger cable unplug</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="Request API Payload - &quot;vungle&quot;->&quot;connection_type&quot;, &quot;connection_type_detail&quot;">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Request API Payload to verify the information of &quot;vungle&quot;->&quot;connection_type&quot;, &quot;connection_type_detail&quot;</p>]]></summary>
	<preconditions><![CDATA[<p>connect to WiFi</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app to call /config API<br>2. load an ad to call /ads API<br>3. play an ad to call /will_play_ad<br>4. close the ad to call /report_ad</p>]]></actions>
	<expectedresults><![CDATA[<p>&quot;connection_type&quot;: &quot;WiFi&quot;<br>&quot;connection_type_detail&quot;: &quot;WiFi&quot;</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="Request API Payload - &quot;vungle&quot;->&quot;locale&quot;">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Request API Payload to verify the information of &quot;vungle&quot;->&quot;locale&quot;</p>]]></summary>
	<preconditions><![CDATA[<p>Set locale as English<br>Set locale as Spanish</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app to call /config API<br>2. load an ad to call /ads API<br>3. play an ad to call /will_play_ad<br>4. close the ad to call /report_ad</p>]]></actions>
	<expectedresults><![CDATA[<p>&quot;locale&quot; matches to the selection</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="Request API Payload - &quot;vungle&quot;->&quot;time_zone&quot;">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Request API Payload to verify the information of &quot;vungle&quot;->&quot;time_zone&quot;</p>]]></summary>
	<preconditions><![CDATA[<p>set Pacific Time Zone<br>set Central Time Zone</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app to call /config API<br>2. load an ad to call /ads API<br>3. play an ad to call /will_play_ad<br>4. close the ad to call /report_ad</p>]]></actions>
	<expectedresults><![CDATA[<p>&quot;time_zone&quot;: America\/Los_Angeles<br>&quot;time_zone&quot;:</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="Request API Payload - &quot;vungle&quot;->&quot;volume_level&quot;">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Request API Payload to verify the information of &quot;vungle&quot;->&quot;volume_level&quot;</p>]]></summary>
	<preconditions><![CDATA[<p>set volume to 0<br>set volume to max</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app to call /config API<br>2. load an ad to call /ads API<br>3. play an ad to call /will_play_ad<br>4. close the ad to call /report_ad</p>]]></actions>
	<expectedresults><![CDATA[<p>&quot;volume_level&quot;: 0,<br>&quot;volume_level&quot;: max</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="Request API Payload - &quot;vungle&quot;->&quot;storage_bytes_available&quot;">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Request API Payload to verify the information of &quot;vungle&quot;->&quot;storage_bytes_available&quot;</p>]]></summary>
	<preconditions><![CDATA[<p>read the current available memory</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app to call /config API<br>2. load an ad to call /ads API<br>3. play an ad to call /will_play_ad<br>4. close the ad to call /report_ad</p>]]></actions>
	<expectedresults><![CDATA[<p>&quot;storage_bytes_available&quot;: matches to the one from the device</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="Request API Payload - the default value of GDPR after refresh initialization - US geo location">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Request API Payload to verify the default value of GDPR after refresh initialization - US geo location</p>]]></summary>
	<preconditions><![CDATA[<p>set Geo-level in header to US</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app to call /config API<br>2. load an ad to call /ads API<br>3. play an ad to call /will_play_ad<br>4. close the ad to call /report_ad</p>]]></actions>
	<expectedresults><![CDATA[<p>&quot;status&quot;: &quot;unknown&quot;</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="Request API Payload - the default value of GDPR after refresh initialization - UK geo location">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Request API Payload to verify the default value of GDPR after refresh initialization - UK geo location</p>]]></summary>
	<preconditions><![CDATA[<p>set Geo-level in header to UK</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app to call /config API<br>2. load an ad to call /ads API<br>3. play an ad to call /will_play_ad<br>4. close the ad to call /report_ad</p>]]></actions>
	<expectedresults><![CDATA[<p>&quot;status&quot;: &quot;unknown&quot;</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="API Header - the user agent info in header of all API calls">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>API Header: to verify the user agent info in header of all API calls</p>]]></summary>
	<preconditions><![CDATA[<p></p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app to call /config API<br>2. load an ad to call /ads API<br>3. play an ad to call /will_play_ad<br>4. close the ad to call /report_ad</p>]]></actions>
	<expectedresults><![CDATA[<p>User-Agent : &quot;VungleDroid/<sdk_version>&quot;<br>Eg. User-Agent: VungleDroid/6.3.17</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="Request API Payload - request /config API Response Payload incentivized">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Request API Payload - request /config API Response Payload to verify incentivized</p>]]></summary>
	<preconditions><![CDATA[<p>inventivized ad<br>non incentiviazed</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app to call /config API<br>2. load an ad to call /ads API<br>3. play an ad to call /will_play_ad<br>4. close the ad to call /report_ad</p>]]></actions>
	<expectedresults><![CDATA[<p>1: for incentivized ad<br>0: for non incentivized ad</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="/config API Response Payload - &quot;endpoints&quot; -> &quot;new&quot;">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>/config API Response Payload to verify &quot;endpoints&quot; -> &quot;new&quot;</p>]]></summary>
	<preconditions><![CDATA[<p>fresh installation</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. install the test app<br>2. type in the vaild App ID and HostAPI<br>3. initialize the app</p>]]></actions>
	<expectedresults><![CDATA[<p>&quot;endpoints&quot;->&quot;new&quot; API URL is called</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="/config API Response Payload - &quot;endpoints&quot; -> &quot;ads&quot;">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>/config API Response Payload to verify &quot;endpoints&quot; -> &quot;ads&quot;</p>]]></summary>
	<preconditions><![CDATA[<p>auto-cacheable ads<br>non auto-cacheable ads</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. load ad or auto-cache</p>]]></actions>
	<expectedresults><![CDATA[<p>auto-cacheable ads call &quot;endpoints&quot;->&quot;ads&quot; API URL automatically to auto-cache the ad<br>non auto-cacheable ads call &quot;endpoints&quot;->&quot;ads&quot; API URL when &quot;load ad&quot; is selected</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="/config API Response Payload - &quot;endpoints&quot; -> &quot;will_play_ad&quot;">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>/config API Response Payload to verify &quot;endpoints&quot; -> &quot;will_play_ad&quot;</p>]]></summary>
	<preconditions><![CDATA[<p></p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. load ad or auto-cache<br>3. play the ad</p>]]></actions>
	<expectedresults><![CDATA[<p>&quot;endpoints&quot;->&quot;will_play_ad&quot; API URL</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="/config API Response Payload - &quot;endpoints&quot; -> &quot;report_ad&quot;">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>/config API Response Payload to verify &quot;endpoints&quot; -> &quot;report_ad&quot;</p>]]></summary>
	<preconditions><![CDATA[<p></p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. load ad or auto-cache<br>3. play the ad<br>4. close the ad</p>]]></actions>
	<expectedresults><![CDATA[<p>&quot;endpoints&quot;->&quot;report_ad&quot; API URL</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="/config API Response Payload - &quot;endpoints&quot; -> &quot;log&quot;">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>/config API Response Payload to verify &quot;endpoints&quot; -> &quot;log&quot;</p>]]></summary>
	<preconditions><![CDATA[<p>&quot;log&quot; is enabled</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. load ad or auto-cache<br>3. play the ad<br>4. observe /log API call</p>]]></actions>
	<expectedresults><![CDATA[<p>&quot;endpoints&quot;->&quot;log&quot; API URL</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="/config API Response Payload - &quot;endpoints&quot; -> &quot;ri&quot;">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>/config API Response Payload to verify &quot;endpoints&quot; -> &quot;ri&quot;</p>]]></summary>
	<preconditions><![CDATA[<p>&quot;ri&quot; is enabled</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. load ad or auto-cache<br>3. play the ad<br>4. Observe /ri API call</p>]]></actions>
	<expectedresults><![CDATA[<p>&quot;endpoints&quot;->&quot;ri&quot; API URL</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="&quot;playback&quot; -> &quot;buffer_timeout&quot;">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify &quot;playback&quot; -> &quot;buffer_timeout&quot;</p>]]></summary>
	<preconditions><![CDATA[<p></p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p></p>]]></actions>
	<expectedresults><![CDATA[<p>timeout ad playback</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="&quot;will_play_ad&quot; -> &quot;enabled&quot;">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify &quot;will_play_ad&quot; -> &quot;enabled&quot;</p>]]></summary>
	<preconditions><![CDATA[<p></p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p></p>]]></actions>
	<expectedresults><![CDATA[<p>true: ad streaming works<br>false: ad play doesn't work</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="&quot;will_play_ad&quot; -> &quot;request_timeout&quot;">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>to verify &quot;will_play_ad&quot; -> &quot;request_timeout&quot;</p>]]></summary>
	<preconditions><![CDATA[<p></p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p></p>]]></actions>
	<expectedresults><![CDATA[<p>??</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="/config API Null Callback">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>/config API Null Callback</p>]]></summary>
	<preconditions><![CDATA[<p>prepare /config response with Null</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1.initialize with /config response with Null JSON through Charles</p>]]></actions>
	<expectedresults><![CDATA[<p>iOS:<br>- initialization successful with displaying the cached ads.<br>- the cached ads fails playing with &quot;SDK is already playing an ad&quot;<br><br>Android: failed initialization with VungleException: Configuration Error occurred.</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="/ads API Null Callback">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>/ads API Null Callback</p>]]></summary>
	<preconditions><![CDATA[<p>prepare /ads response with Null</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load ad with /ads response with Null JSON through Charles<br>2. Play the ad</p>]]></actions>
	<expectedresults><![CDATA[<p>iOS:<br>- auto-cacheable ad: retry /ads API call<br>- Non auto-cacheable ad: ad loading is dismissed without retry<br>Android:<br>- Auto-cacheable Ad: retry /ads API call for with VungleError: No Advertisement is currently available<br>- Non Auto-cacheable Ad: dismiss ad loading with with VungleError: No Advertisement is currently available. No retry</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="/will_play_ad API Null Callback">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>/will_play_ad API Null Callback</p>]]></summary>
	<preconditions><![CDATA[<p>prepare /will_play_ad response with Null</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load ad<br>2. Play the ad with /will_play_ad response with Null JSON</p>]]></actions>
	<expectedresults><![CDATA[<p>/will_play_ad API is called with {} response<br>it doesn't affect on ad play<br>No retry</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="/report API Null Callback">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>/report API Null Callback</p>]]></summary>
	<preconditions><![CDATA[<p>prepare /report response with Null</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load ad<br>2. Play the ad<br>3. close the ad with /report response with Null JSON</p>]]></actions>
	<expectedresults><![CDATA[<p>/report_ad API is called with {} response<br>it doesn't affect on the next ad play<br>No retry</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="/new API Null Callback">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>/new API Null Callback</p>]]></summary>
	<preconditions><![CDATA[<p>prepare /new response with Null</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. fresh install<br>2. initialize with /new response with Null JSON through Charles</p>]]></actions>
	<expectedresults><![CDATA[<p>/new API is called with {} response<br>it doesn't affect on ad play<br>No retry</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
</testsuite>
<testsuite id="" name="Device Storage Limit" >
	<node_order><![CDATA[1]]></node_order>
	<details><![CDATA[]]></details>
<testcase internalid="" name="No space to start SDK initialization">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>No space to start SDK initialization</p>]]></summary>
	<preconditions><![CDATA[<p><50M memory available</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. Set device storage to lower than 50MB<br>2. initialize the app</p>]]></actions>
	<expectedresults><![CDATA[<p>initialization must be failed with error message</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="No space to load the auto-cacheable ad">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>No space to load the auto-cacheable ad</p>]]></summary>
	<preconditions><![CDATA[<p></p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. Set device storage to slightly higher than 50MB (51MB)<br>2. initialize the app<br>3. wait for multiple auto-cacheable ads are loading</p>]]></actions>
	<expectedresults><![CDATA[<p>Initialize but it shows error message when the app tries to auto-cache</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="the dismissed auto-cacheable placement by low memory restarts to auto-cache after the enough memory is available">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>the dismissed auto-cacheable placement by low memory restarts to auto-cache after the enough memory is available</p>]]></summary>
	<preconditions><![CDATA[<p></p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. Set device storage to slightly higher than 50MB (51MB)<br>2. initialize the app<br>3. wait for multiple auto-cacheable ads are loading<br>4. observe the auto-caching is paused or cancelled<br>5. set device storage higher enough to compete in auto-caching</p>]]></actions>
	<expectedresults><![CDATA[<p>Need to find out the expected behavior... retry auto-cache automatically??</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="No space to load the non auto-cacheable ad">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>No space to load the non auto-cacheable ad</p>]]></summary>
	<preconditions><![CDATA[<p></p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. Set device storage to slightly higher than 50MB (51MB)<br>2. initialize the app<br>3. Set device storage to lower than 50MB before the ad is loaded</p>]]></actions>
	<expectedresults><![CDATA[<p>Initialize but it shows error message when the app tries to load</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="Load the dismissed non auto-cacheable ad after the enough memory is available">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Load the dismissed non auto-cacheable ad after the enough memory is available</p>]]></summary>
	<preconditions><![CDATA[<p></p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. Set device storage to slightly higher than 50MB (51MB)<br>2. initialize the app<br>3. Set device storage to lower than 50MB before the ad is loaded<br>4. after the ad load is dismissed, increase the available device storage enough to load the ads<br>5. load the ad again</p>]]></actions>
	<expectedresults><![CDATA[<p>ad is loaded successully and all assets are stored</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
</testsuite>
<testsuite id="" name="Asset Download" >
	<node_order><![CDATA[1]]></node_order>
	<details><![CDATA[]]></details>
<testcase internalid="" name="Assets download with the different network setting">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Assets download at the different network<br>- 4G / LTE<br>- 3G<br>- 1x<br>- WiFi speed</p>]]></summary>
	<preconditions><![CDATA[<p>The device is connected to Charles<br>Set Throttle On to change the network bandwidth</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. set the data network to each low bandwidth<br>2. download assets</p>]]></actions>
	<expectedresults><![CDATA[<p>Ad loading should be successful<br>All assets should be loaded with Status 200</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="Initialize on WiFi and Load Ads on Data Network">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Initialize on WiFi and Load Ads on Data Network</p>]]></summary>
	<preconditions><![CDATA[<p>ADB tool is ready<br>adb commands:<br>- WiFi: adb shell svc wifi enable/disable<br>- Data Network: adb shell svc data enable/disable</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. Enable WiFi<br>2. Initialize the app<br>3. Switch to Data Network<br>4. Load Ad</p>]]></actions>
	<expectedresults><![CDATA[<p>Ad loading should be successful<br>All assets should be loaded with Status 200</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="Initialize on Data Network and Load Ads on WiFi">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Initialize on Data Network and Load Ads on WiFi</p>]]></summary>
	<preconditions><![CDATA[<p>ADB tool is ready<br>adb commands:<br>- WiFi: adb shell svc wifi enable/disable<br>- Data Network: adb shell svc data enable/disable</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. Enable Data Network<br>2. Initialize the app<br>3. Switch to WiFi<br>4. Load Ad</p>]]></actions>
	<expectedresults><![CDATA[<p>Ad loading should be successful<br>All assets should be loaded with Status 200</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="Load/play Ad on WiFi and load next ad on Data Network">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Load/play Ad on WiFi and load next ad on Data Network</p>]]></summary>
	<preconditions><![CDATA[<p>ADB tool is ready<br>adb commands:<br>- WiFi: adb shell svc wifi enable/disable<br>- Data Network: adb shell svc data enable/disable</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. Enable WiFi<br>2. Initialize the app<br>3. Load one ad and play<br>4. Switch to Data Network<br>5. Load the same Ad</p>]]></actions>
	<expectedresults><![CDATA[<p>Ad loading should be successful<br>All assets should be loaded with Status 200</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="Load/play Ad on Data Network and load next ad on WiFi">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Load/play Ad on Data Network and load next ad on WiFi</p>]]></summary>
	<preconditions><![CDATA[<p>ADB tool is ready<br>adb commands:<br>- WiFi: adb shell svc wifi enable/disable<br>- Data Network: adb shell svc data enable/disable</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. Enable Data Network<br>2. Initialize the app<br>3. Load one ad and play<br>4. Switch to WiFi<br>4. Load the same ad</p>]]></actions>
	<expectedresults><![CDATA[<p>Ad loading should be successful<br>All assets should be loaded with Status 200</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="Kill the app while assets are downloading">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Kill the app while assets are downloading</p>]]></summary>
	<preconditions><![CDATA[<p>The device is connected to Charles<br>Set Throttle with low bandwidth of network to download asset slowly</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. download assets<br>2. kill the test app while an asset is downloading<br>3. launch and re-initialize the test app<br>4. Turn off Throttle on Charles to speed up the asset download</p>]]></actions>
	<expectedresults><![CDATA[<p>Ad loading should be successful<br>All assets should start to load with Status 200<br>When the app is relaunched, the interrupted assets should be loaded partially with Status 206<br>The ad must be playable after the re-load is completed<br><br>Auto-Cacheable AD: SDK triggers re-downloading automatically<br>Non Auto-Cacheable AD: SDK doesn't trigger re-downloading. when the load ad is triggered manually, it starts re-downloading</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="put the app in background while assets are downloading">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>put the app in background while assets are downloading</p>]]></summary>
	<preconditions><![CDATA[<p>The device is connected to Charles<br>Set Throttle with low bandwidth of network to download asset slowly</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. download the ads<br>3. put the app in background</p>]]></actions>
	<expectedresults><![CDATA[<p>Ad loading continues on while the app stays in background<br>When the app is in foreground, the ad should be playable</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="Network switch from WiFi to Data Network during asset downloading">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>WiFi to Data Network</p>]]></summary>
	<preconditions><![CDATA[<p>The device has both WiFi and Data Network enabled<br>The device is connected to Charles<br>Set Throttle with low bandwidth of network to download asset slowly<br><br>adb commands:<br>- WiFi: adb shell svc wifi enable/disable<br>- Data Network: adb shell svc data enable/disable</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. download assets on WiFi Network<br>2. disable WiFi network while assets are downloading<br>3. Observe the data network is enabled</p>]]></actions>
	<expectedresults><![CDATA[<p>Ad loading should be successful<br>Ad should be playable</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="Network switch from Data network to WiFi during asset downloading">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Data network to WiFi</p>]]></summary>
	<preconditions><![CDATA[<p>The device has both WiFi and Data Network enabled<br>The device is connected to Charles<br>Set Throttle with low bandwidth of network to download asset slowly<br><br>adb commands:<br>- WiFi: adb shell svc wifi enable/disable<br>- Data Network: adb shell svc data enable/disable</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. download assets on Data Network<br>2. disable Data network by adb command while assets are downloading<br>3. Observe WiFi network is enabled</p>]]></actions>
	<expectedresults><![CDATA[<p>Ad loading should be successful<br>Ad should be playable</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="Network bandwidth transition Low to High Bandwidth">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Low to High Bandwidth Transition<br>low bandwidth (3G, 1x) -> back to high bandwidth</p>]]></summary>
	<preconditions><![CDATA[<p></p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. Set Throttle preset to low bandwidth<br>2. download assets<br>3. set Throttle preset to high bandwidth (4G) while the assets are downloading</p>]]></actions>
	<expectedresults><![CDATA[<p>Ad loading should be successful<br>the ad should be playable</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="Invalid MP4 video">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Invalid MP4 video</p>]]></summary>
	<preconditions><![CDATA[<p>multiple invalid videos</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load ad with the invalid mp4 file through Charles<br>2. Play the ad</p>]]></actions>
	<expectedresults><![CDATA[<p>- no crash<br>- video play is skipped<br>- display EndCards only</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="Broken MP4">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Broken MP4</p>]]></summary>
	<preconditions><![CDATA[<p>prepare txt file as mp4 file</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load ad with the broken mp4 file through Charles<br>2. Play the ad</p>]]></actions>
	<expectedresults><![CDATA[<p>iOS: fails downloading the invalid asset and fails the ad loading<br>Android: skip playing video and displays EndCard only</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="Broken Bundle Zip package">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Broken Bundle Zip package</p>]]></summary>
	<preconditions><![CDATA[<p>prepare txt file as zip file</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load ad with the broken bundle package zip file through Charles<br>2. Play the ad</p>]]></actions>
	<expectedresults><![CDATA[<p>iOS: fails downloading the invalid asset and fails the ad loading<br>Android: skip displaying EndCard. Ad closes after video playback is done</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
</testsuite>
<testsuite id="" name="Malformed URL" >
	<node_order><![CDATA[1]]></node_order>
	<details><![CDATA[]]></details>
<testcase internalid="" name="malformed URL - /config endpoints">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>malformed URL - /config endpoints</p>]]></summary>
	<preconditions><![CDATA[<p>enable rewrite tool in Charles<br>prepare /config response payload with the malformed URL at &quot;ads&quot;, &quot;will_play_ad&quot;, and &quot;report_ad&quot;</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. rewrite /config response with the malformed URL in &quot;endpoints&quot;<br>2. initialize the app</p>]]></actions>
	<expectedresults><![CDATA[<p>No crash happens</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="malformed URL - /ads &quot;tpat&quot; -> &quot;play_percentage&quot;">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>malformed URL - /ads &quot;tpat&quot; -> &quot;play_percentage&quot;</p>]]></summary>
	<preconditions><![CDATA[<p>enable rewrite tool in Charles<br>prepare /ads response payload with the malformed URL in &quot;tpat&quot;</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. rewrite /ads response with the malformed URL in one or more of &quot;tpat&quot; -> &quot;play_percentage&quot;<br>3. enable rewrite in Charles<br>4. load the ad<br>5. observe SDK retries /ads API call<br>6. disable rewrite in Charles<br>7. Observe the following /ads API call</p>]]></actions>
	<expectedresults><![CDATA[<p>No crash happen<br>/ads API call is retried<br>The retried /ads API call loads new ad when the rewrite is disabled in Charles</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="malformed URL - /ads &quot;tpat&quot; -> &quot;postroll_click&quot;, &quot;postroll_view&quot;">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>malformed URL - /ads &quot;tpat&quot; -> &quot;postroll_click&quot;, &quot;postroll_view&quot;</p>]]></summary>
	<preconditions><![CDATA[<p>enable rewrite tool in Charles<br>prepare /ads response payload with the malformed URL in &quot;tpat&quot;</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. rewrite /ads response with the malformed URL in one or more of &quot;tpat&quot; -> &quot;play_percentage&quot;<br>3. enable rewrite in Charles<br>4. load the ad<br>5. observe SDK retries /ads API call<br>6. disable rewrite in Charles<br>7. Observe the following /ads API call</p>]]></actions>
	<expectedresults><![CDATA[<p>No crash happens<br>/ads API call is retried<br>The retried /ads API call loads new ad when the rewrite is disabled in Charles</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="malformed URL - /ads “callToActionDest”, “callToActionUrl”">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>malformed URL - /ads “callToActionDest”, “callToActionUrl”</p>]]></summary>
	<preconditions><![CDATA[<p>enable rewrite tool in Charles<br>prepare /ads response payload with the malformed URL in “callToActionDest”, “callToActionUrl”</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. rewrite /ads response with the malformed URL in one or more of “callToActionDest”, “callToActionUrl”<br>3. load the ad</p>]]></actions>
	<expectedresults><![CDATA[<p>No crash happens</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="malformed URL - /ads “templateURL”, &quot;postBundle&quot;">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>malformed URL - /ads “templateURL”, &quot;postBundle&quot;</p>]]></summary>
	<preconditions><![CDATA[<p>enable rewrite tool in Charles<br>prepare /ads response payload with the malformed URL in “templateURL”, &quot;postBundle&quot;</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. rewrite /ads response with the malformed URL in “templateURL”, &quot;postBundle&quot;<br>3. load the ad<br><br>if /ads API call retries, disable rewrite in Charles<br>and Observe the following /ads API call</p>]]></actions>
	<expectedresults><![CDATA[<p>No crash happens</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="malformed URL - /ads “templateSettings”">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>malformed URL - /ads “templateSettings”</p>]]></summary>
	<preconditions><![CDATA[<p>enable rewrite tool in Charles<br>prepare /ads response payload with the malformed URL in “templateSettings” -> &quot;CTA_BUTTON_URL&quot;</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. rewrite /ads response with the malformed URL in “templateSettings” -> &quot;CTA_BUTTON_URL&quot;<br>3. load the ad</p>]]></actions>
	<expectedresults><![CDATA[<p>No crash happens</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="malformed URL - /ads “cacheable_replacements”">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>malformed URL - /ads “cacheable_replacements”</p>]]></summary>
	<preconditions><![CDATA[<p>enable rewrite tool in Charles</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. rewrite /ads response with the malformed URL in one or more of “cacheable_replacements”<br>3. load the ad<br>4. play the ad</p>]]></actions>
	<expectedresults><![CDATA[<p>No crash happens</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="POSTROLL_CLICK URL with /new API endpoint">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>POSTROLL_CLICK URL with /new API endpoint</p>]]></summary>
	<preconditions><![CDATA[<p>enable rewrite tool in Charles<br>create tpat url with &quot;&quot;https://apiqa.vungle.com/api/v5/new?app_id=5c003b9a3933314cf38ff7f3\u0026ifa=00000000-0000-0000-0000-000000000000\u0026conversion=1\u0026event_id=5c38e2ce631bc200015fb5ec&quot;</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. add one malformed URL with &quot;/new&quot; API endpoint in POSTROLL_CLICK TPAT under &quot;tpat&quot; of /ads response<br>2. rewrite to the /ads<br>3. load the ad<br>4. play the ad<br>5. Click CTA to fire POSTROLL_CLICK TPAT</p>]]></actions>
	<expectedresults><![CDATA[<p>No Crash happens<br>The TPATs are fired successfully</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="URL returns with 302 status">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>URL returns with 302 status</p>]]></summary>
	<preconditions><![CDATA[<p>enable rewrite tool in Charles<br>&quot;callToActionUrl&quot;: &quot;https://app.appsflyer.com/com.vungle.games.tossacoin?pid=vungle_int\u0026af_click_lookback=7d\u0026vungleappid=7748832\u0026af_cost_model=CPI\u0026af_cost_value=9999&quot;</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. add the url that returns 302 status response<br>2. rewrite to the /ads<br>3. load the ad<br>4. play the ad<br>5. Click CTA</p>]]></actions>
	<expectedresults><![CDATA[<p>No Crash happens<br>The API returns with 302 status successfully</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="CTA Url with valid protocols - https">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>CTA Url with valid protocols - https</p>]]></summary>
	<preconditions><![CDATA[<p>CTA URL with valid protocol<br>IOS:<br>https://itunes.apple.com/us/app/apple-tv-remote/id1096834193?mt=8<br><br>Android:<br>https://play.google.com/store/apps/details?id=com.nianticlabs.pokemongo</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load ad<br>2. play ad<br>3. click the clickable area to launch the CTA Url through Storekit/App Store during video is playing<br>4. return to the ad</p>]]></actions>
	<expectedresults><![CDATA[<p>IOS:<br>storekit: it opens on native UI page<br>AppStore: it opens on AppStore<br><br>Android:<br>it opens on Play Store</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="CTA Url with valid protocols - itms, market">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>CTA Url with valid protocols - itms, market</p>]]></summary>
	<preconditions><![CDATA[<p>CTA URL with valid protocol<br>IOS:<br>itms://itune.apple.com/us/app/apple-tv-remote/id1096834193?mt=8x<br><br>Android:<br>market://details?id=com.nianticlabs.pokemongo</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load ad<br>2. play ad<br>3. click the clickable area to launch the CTA Url through Storekit/App Store during video is playing<br>4. return to the ad</p>]]></actions>
	<expectedresults><![CDATA[<p>IOS:<br>storekit: it opens on native UI page<br>AppStore: it opens on iTune Store<br><br>Android:<br>it opens on Play Store</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="CTA Url with invalid protocol">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>CTA Url with invalid protocol</p>]]></summary>
	<preconditions><![CDATA[<p>CTA URL with invalid protocol<br>IOS:<br>itm://itune.apple.com/us/app/apple-tv-remote/id1096834193?mt=8<br>htts://itune.apple.com/us/app/apple-tv-remote/id1096834193?mt=8<br><br>Android:<br>mark://details?id=com.nianticlabs.pokemongo<br>https://play.google.com/store/apps/details?id=com.nianticlabs.pokemongo</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load ad<br>2. play ad<br>3. click the clickable area to launch the CTA Url through Storekit/App Store during video is playing</p>]]></actions>
	<expectedresults><![CDATA[<p>The click doesn't response on UI<br>TPAT(POSTROLL_CLICK) is fired<br><br>Android: the expected behavior is under discussion at AND-2013</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="CTA Url with invalid domain">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>CTA Url with invalid domain</p>]]></summary>
	<preconditions><![CDATA[<p>CTA URL with invalid domain<br>IOS:<br>https://itune.apple.com/us/app/apple-tv-remote/id1096834193?mt=8<br><br>Android:<br>https://play.googl.com/store/apps/details?id=com.nianticlabs.pokemong</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load ad<br>2. play ad<br>3. click the clickable area to launch the CTA Url through Storekit/App Store during video is playing</p>]]></actions>
	<expectedresults><![CDATA[<p>IOS:<br>storekit: it opens AppStore successfully with the valid App ID<br>AppStore: it opens on iTune Store, but it fails displaying the app<br><br>Android: &quot;This site can't be reached&quot; is displayed on the browser</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="CTA Url with invalid Application ID">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>CTA Url with invalid Application ID</p>]]></summary>
	<preconditions><![CDATA[<p>CTA URL with<br>IOS:<br>https://itunes.apple.com/us/app/apple-tv-remote/id10968341?mt=8<br><br>Android:<br>https://play.google.com/store/apps/details?id=com.nianticlabs.pokemon</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load ad<br>2. play ad<br>3. click the clickable area to launch the CTA Url through Storekit/App Store during video is playing</p>]]></actions>
	<expectedresults><![CDATA[<p>IOS:<br>storekit: it opens AppStore successfully but it fails displaying the app<br>AppStore: it opens on iTune Store, but it fails displaying the app<br><br>Android: playstore is launched successfully but it displays &quot;item not found&quot;</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="CTA Url without Application ID">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>CTA Url without Application ID</p>]]></summary>
	<preconditions><![CDATA[<p>CTA URL with<br>IOS: https://www.vungle.com<br>Android: https://play.google.com/store/apps</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load ad<br>2. play ad<br>3. click the clickable area to launch the CTA Url through Storekit/App Store during video is playing</p>]]></actions>
	<expectedresults><![CDATA[<p>IOS:<br>Storekit doesn't launched because the URL doesn't include AppID.<br>the app always opens browser with the url when the CTA is clicked<br><br>Android: Playstore is launched with the main page</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="CTA Url with blank">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>CTA Url with blank</p>]]></summary>
	<preconditions><![CDATA[<p>CTA URL with &quot;&quot;</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. load ad<br>2. play ad<br>3. click the clickable area to launch the CTA Url through Storekit/App Store during video is playing</p>]]></actions>
	<expectedresults><![CDATA[<p>The click doesn't response on UI<br>TPAT(POSTROLL_CLICK) is fired<br><br>Android: the expected behavior is under discussion at AND-2013</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
</testsuite>
<testsuite id="" name="AutoCache/Multi AutoCache" >
	<node_order><![CDATA[1]]></node_order>
	<details><![CDATA[]]></details>
<testcase internalid="" name="no placement auto-cached">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>no placement auto-cached</p>]]></summary>
	<preconditions><![CDATA[<p>zero auto-cacheable placement</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. observe ads</p>]]></actions>
	<expectedresults><![CDATA[<p>no ad must be auto-cached</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="no placement auto-cached after clear cache">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>no placement auto-cached after clear cache</p>]]></summary>
	<preconditions><![CDATA[<p>zero auto-cacheable placement</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2.observe no ad auto-cached<br>3. clear cache</p>]]></actions>
	<expectedresults><![CDATA[<p>no ad must be auto-cached</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="no auto-cached after playing">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>no auto-cached after playing</p>]]></summary>
	<preconditions><![CDATA[<p>zero auto-cacheable placement</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2.observe no ad auto-cached<br>3. play ad and close</p>]]></actions>
	<expectedresults><![CDATA[<p>/ads, /will_play_ad, and /report_ad must be called in sequence<br><br>the played ad should not be auto-cached</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="no auto-cached after re-initialization">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>no auto-cached after re-initialization</p>]]></summary>
	<preconditions><![CDATA[<p>zero auto-cacheable placement</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. observe no ad auto-cached<br>3. kill the app<br>4. re-initialize the app</p>]]></actions>
	<expectedresults><![CDATA[<p>no ad must be auto-cached after re-initialization</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="single auto-cacheable placement must be autocached">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>single auto-cacheable placement must be autocached</p>]]></summary>
	<preconditions><![CDATA[<p>1 auto-cacheable placement of each ad type</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. observe auto-cacheable ads<br>3. repeat step 1-2 with each ad type</p>]]></actions>
	<expectedresults><![CDATA[<p>only auto-cacheable ads must be loaded</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="multipleauto-cacheable placements must be auto-cached">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>multipleauto-cacheable placements must be auto-cached</p>]]></summary>
	<preconditions><![CDATA[<p>multiple auto-cacheable placements<br>(1 placement of each ad type are autocacheable)</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. observe auto-cacheable ads</p>]]></actions>
	<expectedresults><![CDATA[<p>only auto-cacheable ads must be loaded</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="play the auto-cacheable ad">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>play the auto-cacheable ad</p>]]></summary>
	<preconditions><![CDATA[<p>multiple auto-cacheable placements<br>(1 placement of each ad type are autocacheable)</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. wait until all auto-cacheable ads are loaded<br>3. play all auto-cached ads individually</p>]]></actions>
	<expectedresults><![CDATA[<p>/will_play_ad, /ads, and /report_ad must be called in sequence<br><br>the ad must be auto-cached</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="load and play the non auto-cacheable ad">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>load and play the non auto-cacheable ad</p>]]></summary>
	<preconditions><![CDATA[<p>multiple auto-cacheable placements<br>(1 placement of each ad type are autocacheable,<br>1 placement of each ad type are non-autocacheable)</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2.observe no ad auto-cached<br>3. play all non auto-cacheable ad individually and close</p>]]></actions>
	<expectedresults><![CDATA[<p>/ads, /will_play_ad, and /report_ad must be called in sequence<br><br>the played non auto-cacheable ad should not be auto-cached</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="play auto-cacheable ad while the auto-caching is loading">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>play auto-cacheable ad while the auto-caching is loading</p>]]></summary>
	<preconditions><![CDATA[<p>multiple auto-cacheable placements<br>(1 placement of each ad type are autocacheable,<br>1 placement of each ad type are non-autocacheable)</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. play an auto-cached ad while the auto-caching is loading</p>]]></actions>
	<expectedresults><![CDATA[<p>/will_play_ad, /ads, and /report_ad must be called in sequence<br><br>ad plays successfully<br>while auto-caching continues on<br>The played ad must be auto-cached</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="play non auto-cacheable ad while the auto-caching is loading">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>play non auto-cacheable ad while the auto-caching is loading</p>]]></summary>
	<preconditions><![CDATA[<p>multiple auto-cacheable placements<br>(1 placement of each ad type are autocacheable,<br>1 placement of each ad type are non-autocacheable)</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. load and play an non auto-cached ad while the auto-caching is loading</p>]]></actions>
	<expectedresults><![CDATA[<p>/ads, /will_play_ad, and /report_ad must be called in sequence<br><br>ad is loaded and played successfully after all auto-cacheable placements are loaded<br>The played ad must not be auto-cached</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="Interrupt auto-caching by putting in background">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Interrupt auto-caching by putting in background</p>]]></summary>
	<preconditions><![CDATA[<p>multiple auto-cacheable placements<br>(1 placement of each ad type are autocacheable,<br>1 placement of each ad type are non-autocacheable)</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. put app in background while the auto-caching is loading<br>3. bring the app in foreground</p>]]></actions>
	<expectedresults><![CDATA[<p>iOS: app pauses auto-caching in background and it resumes auto-caching when it is back in foreground<br><br>Android: app should continue to auto-caching in background<br><br>Windows: either one.. please record the behavior in result</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="Interrupt auto-caching by locking the device">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Interrupt auto-caching by locking the device</p>]]></summary>
	<preconditions><![CDATA[<p>multiple auto-cacheable placements<br>(1 placement of each ad type are autocacheable,<br>1 placement of each ad type are non-autocacheable)</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. Lock the device while the auto-caching is loading<br>3. Unlock the device and launch the app</p>]]></actions>
	<expectedresults><![CDATA[<p>auto-caching must be paused when the app is locked<br>App should resume auto-caching</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="Interrupt auto-caching by killing the app">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Interrupt auto-caching by killing the app</p>]]></summary>
	<preconditions><![CDATA[<p>multiple auto-cacheable placements<br>(1 placement of each ad type are autocacheable,<br>1 placement of each ad type are non-autocacheable)</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. Kill the app while the auto-caching is loading<br>3. Re-initialize the app</p>]]></actions>
	<expectedresults><![CDATA[<p>auto-caching must be paused when the app is killed<br>App should resume auto-caching</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="Interrupt the auto-caching by network disable">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Interrupt the auto-caching by network disable</p>]]></summary>
	<preconditions><![CDATA[<p>multiple auto-cacheable placements<br>(1 placement of each ad type are autocacheable,<br>1 placement of each ad type are non-autocacheable)</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. disable data network while the auto-caching is loading<br>3. enable data network</p>]]></actions>
	<expectedresults><![CDATA[<p>auto-caching must be paused when data network is disabled<br>auto-caching should be resumed when data network is enabled back</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="Auto-cached ad is playable after re-initialization">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Auto-cached ad is playable after re-initialization</p>]]></summary>
	<preconditions><![CDATA[<p>multiple auto-cacheable placements<br>(1 placement of each ad type are autocacheable,<br>1 placement of each ad type are non-autocacheable)</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. set all different type of ads as auto-cacheable<br>2. initialize the app and wait until all ads are auto-cached<br>3. kill the app and re-initialize the app<br>4. play the auto-cached ads</p>]]></actions>
	<expectedresults><![CDATA[<p>all auto-cached ads are playable.<br>auto-cache should not be restarted</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="auto-cache after network is restored">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>auto-cache after network is restored</p>]]></summary>
	<preconditions><![CDATA[<p>multiple auto-cacheable placements (each type of ads)</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. set all different type of ads as auto-cacheable<br>2. initialize the app<br>3. Disable the data network<br>4. play all auto-cached ads<br>5. Enable the data network</p>]]></actions>
	<expectedresults><![CDATA[<p>Auto cacheble ads must not be auto-cached while the data network is disabled<br>Auto cacheable ads must be auto-cached after the data network is restored</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="Play auto-cacheable ad while data network is disabled">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Play auto-cacheable ad while data network is disabled</p>]]></summary>
	<preconditions><![CDATA[<p>multiple auto-cacheable placements<br>(1 placement of each ad type are autocacheable,<br>1 placement of each ad type are non-autocacheable)</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. wait for all auto-caching is done<br>3. disable data network<br>4. play and close all auto-cached ads individually<br>5. enable data network</p>]]></actions>
	<expectedresults><![CDATA[<p>The played auto-cacheable ads should not be auto-cached while the network is disabled<br><br>The played auto-cacheable ads should start auto-caching when data network is enabled back</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="All auto-cacheable placements: play all different types of ads">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>All auto-cacheable placements:<br>play all different types of ads</p>]]></summary>
	<preconditions><![CDATA[<p>all auto-cacheable placements</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. wait until all auto-cacheable ads are loaded<br>3. play all different types of ads</p>]]></actions>
	<expectedresults><![CDATA[<p>/will_play_ad, /ads, and /report_ad must be called in sequence<br><br>the played auto-cacheable ad should be re-loaded</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="All auto-cacheable placements: more than 10 auto-cacheable placements">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>All auto-cacheable placements:<br>more than 10 auto-cacheable placements</p>]]></summary>
	<preconditions><![CDATA[<p>all auto-cacheable placements (>10)</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app with more than 10 auto-cacheable placements</p>]]></actions>
	<expectedresults><![CDATA[<p>All auto-cacheable placements are auto-cached successfully<br>All of them are playable</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="Auto-cacheable to Non auto-cacheable after auto-cached">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Auto-cacheable to Non auto-cacheable after auto-cached</p>]]></summary>
	<preconditions><![CDATA[<p>multiple auto-cacheable placements<br>(1 placement of each ad type are autocacheable,<br>1 placement of each ad type are non-autocacheable)</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. set all different type of ads as auto-cacheable<br>2. initialize the app and wait until all ads are auto-cached<br>3. set all auto-cached ads as non auto-cacheable<br>4. Play the auto-cached ad</p>]]></actions>
	<expectedresults><![CDATA[<p>all auto-cached ads must be playable<br>After playing, the ad doesn't auto-cache</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="Non auto-cacheable to auto-cacheable">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Non auto-cacheable to auto-cacheable</p>]]></summary>
	<preconditions><![CDATA[<p>multiple auto-cacheable placements (each type of ads)</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. set all different type of ads as non auto-cacheable<br>2. initialize the app<br>3. set all non auto-cached ads as auto-cacheable</p>]]></actions>
	<expectedresults><![CDATA[<p>all ads must be auto-cached after the auto-cacheable config is applied</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
</testsuite>
<testsuite id="" name="Ad ID and Fallback" >
	<node_order><![CDATA[1]]></node_order>
	<details><![CDATA[]]></details>
<testcase internalid="" name="[iOS] Ad ID: enabled, Publish IDFV: enabled">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>iOS<br>Ad ID: enabled<br>Publish IDFV: enabled</p>]]></summary>
	<preconditions><![CDATA[<p>iOS: newer than version10<br>Limit Ad Tracking: Disabled<br>Publish IDFV: Enabled</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. load ad<br>3. play ad<br>4. close ad<br>5. Observe &quot;ifa&quot;, &quot;idfa&quot;, and &quot;idfv&quot; values in /config, /ads, /will_play_ad, and /report_ad API Request Payload</p>]]></actions>
	<expectedresults><![CDATA[<p>API request payload:<br>- &quot;ifa&quot;, &quot;idfa&quot; = Ad ID(IDFA) value<br>- &quot;idfv&quot; = IDFV value</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="[iOS] Ad ID: enabled, Publish IDFV: disabled">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>iOS<br>Ad ID: enabled<br>Publish IDFV: disabled</p>]]></summary>
	<preconditions><![CDATA[<p>iOS: newer than version10<br>Limit Ad Tracking: Disabled<br>Publish IDFV: Disabled</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. load ad<br>3. play ad<br>4. close ad<br>5. Observe &quot;ifa&quot;, &quot;idfa&quot;, and &quot;idfv&quot; values in /config, /ads, /will_play_ad, and /report_ad API Request Payload</p>]]></actions>
	<expectedresults><![CDATA[<p>API request payload:<br>- &quot;ifa&quot;, &quot;idfa&quot; = Ad ID(IDFA) value<br>- &quot;idfv&quot;: doesn't exist</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="[iOS] Ad ID: disabled, Publish IDFV: enabled">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>iOS<br>Ad ID: disabled<br>Publish IDFV: enabled</p>]]></summary>
	<preconditions><![CDATA[<p>iOS: newer than version10<br>Limit Ad Tracking: Enabled<br>Publish IDFV: Enabled</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. load ad<br>3. play ad<br>4. close ad<br>5. Observe &quot;ifa&quot;, &quot;idfa&quot;, and &quot;idfv&quot; values in /config, /ads, /will_play_ad, and /report_ad API Request Payload</p>]]></actions>
	<expectedresults><![CDATA[<p>API request payload:<br>- &quot;ifa&quot;, &quot;idfa&quot; = all zeros and dashes<br>- &quot;idfv&quot; = IDFV value</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="[iOS] Ad ID: disabled, Publish IDFV: disabled">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>iOS<br>Ad ID: disabled<br>Publish IDFV: disabled</p>]]></summary>
	<preconditions><![CDATA[<p>iOS: newer than version10<br>Limit Ad Tracking: Enabled<br>Publish IDFV: Disabled</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. load ad<br>3. play ad<br>4. close ad<br>5. Observe &quot;ifa&quot;, &quot;idfa&quot;, and &quot;idfv&quot; values in /config, /ads, /will_play_ad, and /report_ad API Request Payload</p>]]></actions>
	<expectedresults><![CDATA[<p>API request payload:<br>- &quot;ifa&quot;, &quot;idfa&quot; = all zeros and dashes<br>- &quot;idfv&quot; doesn't exist</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="[iOS] Ad ID: enabled, Publish IDFV: enabled">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>iOS<br>Ad ID: enabled<br>Publish IDFV: enabled</p>]]></summary>
	<preconditions><![CDATA[<p>iOS: version 9 or older<br>Limit Ad Tracking: Disabled<br>Publish IDFV: Enabled</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. load ad<br>3. play ad<br>4. close ad<br>5. Observe &quot;ifa&quot;, &quot;idfa&quot;, and &quot;idfv&quot; values in /config, /ads, /will_play_ad, and /report_ad API Request Payload</p>]]></actions>
	<expectedresults><![CDATA[<p>API request payload:<br>- &quot;ifa&quot;, &quot;idfa&quot; = Ad ID(IDFA) value<br>- &quot;idfv&quot; = IDFV value</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="[iOS] Ad ID: enabled, Publish IDFV: disabled">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>iOS<br>Ad ID: enabled<br>Publish IDFV: disabled</p>]]></summary>
	<preconditions><![CDATA[<p>iOS: version 9 or older<br>Limit Ad Tracking: Disabled<br>Publish IDFV: Disabled</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. load ad<br>3. play ad<br>4. close ad<br>5. Observe &quot;ifa&quot;, &quot;idfa&quot;, and &quot;idfv&quot; values in /config, /ads, /will_play_ad, and /report_ad API Request Payload</p>]]></actions>
	<expectedresults><![CDATA[<p>API request payload:<br>- &quot;ifa&quot;, &quot;idfa&quot; = Ad ID(IDFA) value<br>- &quot;idfv&quot;: doesn't exist</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="[iOS] Ad ID: disabled, Publish IDFV: enabled">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>iOS<br>Ad ID: disabled<br>Publish IDFV: enabled</p>]]></summary>
	<preconditions><![CDATA[<p>iOS: version 9 or older<br>Limit Ad Tracking: Enabled<br>Publish IDFV: Enabled</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. load ad<br>3. play ad<br>4. close ad<br>5. Observe &quot;ifa&quot;, &quot;idfa&quot;, and &quot;idfv&quot; values in /config, /ads, /will_play_ad, and /report_ad API Request Payload</p>]]></actions>
	<expectedresults><![CDATA[<p>API request payload:<br>- &quot;ifa&quot;, &quot;idfa&quot; = Ad ID(IDFA) value<br>- &quot;idfv&quot; = IDFV value</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="[iOS] Ad ID: disabled, Publish IDFV: disabled">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>iOS<br>Ad ID: disabled<br>Publish IDFV: disabled</p>]]></summary>
	<preconditions><![CDATA[<p>iOS: version 9 or older<br>Limit Ad Tracking: Enabled<br>Publish IDFV: Disabled</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. load ad<br>3. play ad<br>4. close ad<br>5. Observe &quot;ifa&quot;, &quot;idfa&quot;, and &quot;idfv&quot; values in /config, /ads, /will_play_ad, and /report_ad API Request Payload</p>]]></actions>
	<expectedresults><![CDATA[<p>API request payload:<br>- &quot;ifa&quot;, &quot;idfa&quot; = Ad ID(IDFA) value<br>- &quot;idfv&quot; doesn't exist</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="[Android] Ad ID: enabled, AndroidID: enabled">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Android<br>Ad ID: enabled<br>AndroidID: enabled</p>]]></summary>
	<preconditions><![CDATA[<p>Android with Google Service Installed<br>Opt out of Ads Personalization: Disabled<br>AndroidID: Enabled</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. load ad<br>3. play ad<br>4. close ad<br>5. Observe &quot;ifa&quot; and &quot;gaid&quot;, values in /config, /ads, /will_play_ad, and /report_ad API Request Payload</p>]]></actions>
	<expectedresults><![CDATA[<p>API request payload:<br>- &quot;ifa&quot;, &quot;gaid&quot; = Ad ID value<br>- &quot;android_id&quot; = &quot;&quot;</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="[Android] Ad ID: enabled, AndroidID: disabled">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Android<br>Ad ID: enabled<br>AndroidID: disabled</p>]]></summary>
	<preconditions><![CDATA[<p>Android with Google Service Installed<br>Opt out of Ads Personalization: Disabled<br>AndroidID: Disabled</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. load ad<br>3. play ad<br>4. close ad<br>5. Observe &quot;ifa&quot; and &quot;gaid&quot;, values in /config, /ads, /will_play_ad, and /report_ad API Request Payload</p>]]></actions>
	<expectedresults><![CDATA[<p>API request payload:<br>- &quot;ifa&quot;, &quot;gaid&quot; = Ad ID value<br>- &quot;android_id&quot; = &quot;&quot;</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="[Android] Ad ID: disabled, AndroidID: enabled">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Android<br>Ad ID: disabled<br>AndroidID: enabled</p>]]></summary>
	<preconditions><![CDATA[<p>Android with Google Service Installed<br>Opt out of Ads Personalization: Enabled<br>AndroidID: Enabled</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. load ad<br>3. play ad<br>4. close ad<br>5. Observe &quot;ifa&quot; and &quot;gaid&quot;, values in /config, /ads, /will_play_ad, and /report_ad API Request Payload</p>]]></actions>
	<expectedresults><![CDATA[<p>API request payload:<br>- &quot;ifa&quot;, &quot;gaid&quot; = Ad ID value<br>- &quot;android_id&quot; = &quot;&quot;</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="[Android] Ad ID: disabled, AndroidID: disabled">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Android<br>Ad ID: disabled<br>AndroidID: disabled</p>]]></summary>
	<preconditions><![CDATA[<p>Android with Google Service Installed<br>Opt out of Ads Personalization: Enabled<br>AndroidID: Disabled</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. load ad<br>3. play ad<br>4. close ad<br>5. Observe &quot;ifa&quot; and &quot;gaid&quot;, values in /config, /ads, /will_play_ad, and /report_ad API Request Payload</p>]]></actions>
	<expectedresults><![CDATA[<p>API request payload:<br>- &quot;ifa&quot;, &quot;gaid&quot; = Ad ID value<br>- &quot;android_id&quot; = &quot;&quot;</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="[Amazon] Ad ID: Enabled, AndroidID: enabled">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Android Amazon<br>Ad ID: Enabled<br>AndroidID: enabled</p>]]></summary>
	<preconditions><![CDATA[<p>Android Amazon<br>Advertising ID: Endabled<br>AndroidID: Enabled</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. load ad<br>3. play ad<br>4. close ad<br>5. Observe &quot;ifa&quot; and &quot;amazon_advertising_id&quot; values in /config, /ads, /will_play_ad, and /report_ad API Request Payload</p>]]></actions>
	<expectedresults><![CDATA[<p>API request payload:<br>- &quot;ifa&quot;, &quot;amazon_advertising_id&quot; = Ad ID value</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="[Amazon] Ad ID: Enabled, AndroidID: disabled">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Android Amazon<br>Ad ID: Enabled<br>AndroidID: disabled</p>]]></summary>
	<preconditions><![CDATA[<p>Android Amazon<br>Advertising ID: Endabled<br>AndroidID: Disabled</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. load ad<br>3. play ad<br>4. close ad<br>5. Observe &quot;ifa&quot; and &quot;amazon_advertising_id&quot; values in /config, /ads, /will_play_ad, and /report_ad API Request Payload</p>]]></actions>
	<expectedresults><![CDATA[<p>API request payload:<br>- &quot;ifa&quot;, &quot;amazon_advertising_id&quot; = Ad ID value</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="[Amazon] Ad ID: disabled, AndroidID: enabled">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Android Amazon<br>Ad ID: disabled<br>AndroidID: enabled</p>]]></summary>
	<preconditions><![CDATA[<p>Android Amazon<br>Advertising ID: Disabled<br>AndroidID: Enabled</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. load ad<br>3. play ad<br>4. close ad<br>5. Observe &quot;ifa&quot; and &quot;amazon_advertising_id&quot; values in /config, /ads, /will_play_ad, and /report_ad API Request Payload</p>]]></actions>
	<expectedresults><![CDATA[<p>API request payload:<br>- &quot;ifa&quot;, &quot;amazon_advertising_id&quot; = Ad ID value</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="[Amazon] Ad ID: disabled, AndroidID: disabled">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Android Amazon<br>Ad ID: disabled<br>AndroidID: disabled</p>]]></summary>
	<preconditions><![CDATA[<p>Android Amazon<br>Advertising ID: Disabled<br>AndroidID: Disabled</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. load ad<br>3. play ad<br>4. close ad<br>5. Observe &quot;ifa&quot; and &quot;amazon_advertising_id&quot; values in /config, /ads, /will_play_ad, and /report_ad API Request Payload</p>]]></actions>
	<expectedresults><![CDATA[<p>API request payload:<br>- &quot;ifa&quot;, &quot;amazon_advertising_id&quot; = Ad ID value</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="[Android Chinese] AndroidID: enabled">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Android Chinese<br>AndroidID: enabled</p>]]></summary>
	<preconditions><![CDATA[<p>Android Chinese Device<br>AndroidID: Enabled</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. load ad<br>3. play ad<br>4. close ad<br>5. Observe &quot;ifa&quot; and &quot;android_id&quot; values in /config, /ads, /will_play_ad, and /report_ad API Request Payload</p>]]></actions>
	<expectedresults><![CDATA[<p>API request payload:<br>- &quot;ifa&quot;, &quot;android_id&quot; = Ad ID value</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="[Android Chinese] AndroidID: disabled">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Android Chinese<br>AndroidID: disabled</p>]]></summary>
	<preconditions><![CDATA[<p>Android Chinese Device<br>AndroidID: Disabled</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. load ad<br>3. play ad<br>4. close ad<br>5. Observe &quot;ifa&quot; and &quot;android_id&quot; values in /config, /ads, /will_play_ad, and /report_ad API Request Payload</p>]]></actions>
	<expectedresults><![CDATA[<p>API request payload:<br>- &quot;ifa&quot; = &quot;&quot;<br>- &quot;android_id&quot; doesn't exist</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="[Windows] Ad ID: enabled, AndroidID: enabled">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Windows<br>Ad ID: enabled<br>AndroidID: enabled</p>]]></summary>
	<preconditions><![CDATA[<p>Windows<br>Settings -> Privacy: Disabled<br>ashwid: Enabled</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. load ad<br>3. play ad<br>4. close ad<br>5. Observe &quot;ifa&quot;, &quot;msaid&quot;, and &quot;ashwid&quot; values in /config, /ads, /will_play_ad, and /report_ad API Request Payload</p>]]></actions>
	<expectedresults><![CDATA[<p>API request payload:<br>- &quot;ifa&quot;, &quot;msaid&quot; = Ad ID value<br>- &quot;ashwid&quot; = ASHWID value</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="[Windows] Ad ID: enabled, AndroidID: disabled">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Windows<br>Ad ID: enabled<br>AndroidID: disabled</p>]]></summary>
	<preconditions><![CDATA[<p>Windows<br>Settings -> Privacy: Disabled<br>ashwid: Disabled</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. load ad<br>3. play ad<br>4. close ad<br>5. Observe &quot;ifa&quot;, &quot;msaid&quot;, and &quot;ashwid&quot; values in /config, /ads, /will_play_ad, and /report_ad API Request Payload</p>]]></actions>
	<expectedresults><![CDATA[<p>API request payload:<br>- &quot;ifa&quot;, &quot;msaid&quot; = Ad ID value<br>- &quot;ashwid&quot; : doesn't exist</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="[Windows] Ad ID: disabled, AndroidID: enabled">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Windows<br>Ad ID: disabled<br>AndroidID: enabled</p>]]></summary>
	<preconditions><![CDATA[<p>Windows<br>Settings -> Privacy: Enabled<br>ashwid: Enabled</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. load ad<br>3. play ad<br>4. close ad<br>5. Observe &quot;ifa&quot;, &quot;msaid&quot;, and &quot;ashwid&quot; values in /config, /ads, /will_play_ad, and /report_ad API Request Payload</p>]]></actions>
	<expectedresults><![CDATA[<p>API request payload:<br>- &quot;ifa&quot;, &quot;msaid&quot; = &quot;&quot;<br>- &quot;ashwid&quot; = ASHWID value</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
<testcase internalid="" name="[Windows] Ad ID: enabled, AndroidID: enabled">
	<node_order><![CDATA[1000]]></node_order>
	<externalid><![CDATA[]]></externalid>
	<version><![CDATA[1]]></version>
	<summary><![CDATA[<p>Windows<br>Ad ID: enabled<br>AndroidID: enabled</p>]]></summary>
	<preconditions><![CDATA[<p>Windows<br>Settings -> Privacy: Disabled<br>ashwid: Enabled</p>]]></preconditions>
	<execution_type><![CDATA[1]]></execution_type>
	<estimated_exec_duration></estimated_exec_duration>
	<status>1</status>
	<is_open>1</is_open>
	<active>1</active>
<steps>
<step>
	<step_number><![CDATA[1]]></step_number>
	<actions><![CDATA[<p>1. initialize the app<br>2. load ad<br>3. play ad<br>4. close ad<br>5. Observe &quot;ifa&quot;, &quot;msaid&quot;, and &quot;ashwid&quot; values in /config, /ads, /will_play_ad, and /report_ad API Request Payload</p>]]></actions>
	<expectedresults><![CDATA[<p>API request payload:<br>- &quot;ifa&quot;, &quot;msaid&quot; = Ad ID value<br>- &quot;ashwid&quot; = ASHWID value</p>]]></expectedresults>
	<execution_type><![CDATA[1]]></execution_type>
</step>
</steps>
</testcase>
</testsuite>
</testsuite>